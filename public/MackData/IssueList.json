{
  "data": [
    {
      "url": "https://api.github.com/repos/facebook/react/issues/13991",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/13991/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/13991/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/13991/events",
      "html_url": "https://github.com/facebook/react/issues/13991",
      "id": 374587589,
      "node_id": "MDU6SXNzdWUzNzQ1ODc1ODk=",
      "number": 13991,
      "title": "Hooks + multiple instances of React",
      "user": {
        "login": "brunolemos",
        "id": 619186,
        "node_id": "MDQ6VXNlcjYxOTE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/619186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brunolemos",
        "html_url": "https://github.com/brunolemos",
        "followers_url": "https://api.github.com/users/brunolemos/followers",
        "following_url": "https://api.github.com/users/brunolemos/following{/other_user}",
        "gists_url": "https://api.github.com/users/brunolemos/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/brunolemos/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/brunolemos/subscriptions",
        "organizations_url": "https://api.github.com/users/brunolemos/orgs",
        "repos_url": "https://api.github.com/users/brunolemos/repos",
        "events_url": "https://api.github.com/users/brunolemos/events{/privacy}",
        "received_events_url": "https://api.github.com/users/brunolemos/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 710375792,
          "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
          "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
          "name": "Type: Discussion",
          "color": "fef2c0",
          "default": false,
          "description": null
        },
        {
          "id": 1109410193,
          "node_id": "MDU6TGFiZWwxMTA5NDEwMTkz",
          "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Hooks",
          "name": "Component: Hooks",
          "color": "c2f27b",
          "default": false,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 476,
      "created_at": "2018-10-27T00:34:08Z",
      "updated_at": "2023-07-07T08:57:20Z",
      "closed_at": null,
      "author_association": "NONE",
      "active_lock_reason": null,
      "body": "# To people coming from search: please [read this page first](https://reactjs.org/warnings/invalid-hook-call-warning.html). It contains most common possible fixes!\r\n\r\n\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nEnhancement\r\n\r\n**What is the current behavior?**\r\n\r\nI had multiple instances of React by mistake.\r\n\r\nWhen trying to use hooks, got this error:\r\n`hooks can only be called inside the body of a function component`\r\n\r\nWhich is not correct since I was using function components. Took me a while to find the real cause of the issue.\r\n\r\n**What is the expected behavior?**\r\n\r\nShow the correct error message. Maybe detect that the app has multiple instances of React and say that it may be the reason of bugs. ",
      "reactions": {
        "url": "https://api.github.com/repos/facebook/react/issues/13991/reactions",
        "total_count": 339,
        "+1": 265,
        "-1": 0,
        "laugh": 0,
        "hooray": 2,
        "confused": 2,
        "heart": 15,
        "rocket": 31,
        "eyes": 24
      },
      "timeline_url": "https://api.github.com/repos/facebook/react/issues/13991/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/11347",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/11347/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/11347/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/11347/events",
      "html_url": "https://github.com/facebook/react/issues/11347",
      "id": 267902244,
      "node_id": "MDU6SXNzdWUyNjc5MDIyNDQ=",
      "number": 11347,
      "title": "RFC: Plan for custom element attributes/properties in React 19",
      "user": {
        "login": "robdodson",
        "id": 1066253,
        "node_id": "MDQ6VXNlcjEwNjYyNTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1066253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/robdodson",
        "html_url": "https://github.com/robdodson",
        "followers_url": "https://api.github.com/users/robdodson/followers",
        "following_url": "https://api.github.com/users/robdodson/following{/other_user}",
        "gists_url": "https://api.github.com/users/robdodson/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/robdodson/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/robdodson/subscriptions",
        "organizations_url": "https://api.github.com/users/robdodson/orgs",
        "repos_url": "https://api.github.com/users/robdodson/repos",
        "events_url": "https://api.github.com/users/robdodson/events{/privacy}",
        "received_events_url": "https://api.github.com/users/robdodson/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 127893911,
          "node_id": "MDU6TGFiZWwxMjc4OTM5MTE=",
          "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
          "name": "Component: DOM",
          "color": "fef2c0",
          "default": false,
          "description": null
        },
        {
          "id": 710375792,
          "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
          "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
          "name": "Type: Discussion",
          "color": "fef2c0",
          "default": false,
          "description": null
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 259,
      "created_at": "2017-10-24T05:28:49Z",
      "updated_at": "2023-05-18T04:13:02Z",
      "closed_at": null,
      "author_association": "NONE",
      "active_lock_reason": null,
      "body": "This is meant to address #7249. The doc outlines the pros and cons of various approaches React could use to handle attributes and properties on custom elements.\r\n\r\n# TOC/Summary\r\n\r\n- Background\r\n- Proposals\r\n  * Option 1: Only set properties\r\n    + Pros\r\n      - Easy to understand/implement\r\n      - Avoids conflict with future global attributes\r\n      - Takes advantage of custom element \"upgrade\"\r\n      - Custom elements treated like any other React component\r\n    + Cons\r\n      - Possibly a breaking change\r\n      - Need ref to set attribute\r\n      - Not clear how server-side rendering would work\r\n  * Option 2: Properties-if-available\r\n    + Pros\r\n      - Non-breaking change\r\n    + Cons\r\n      - Developers need to understand the heuristic\r\n      - Falling back to attributes may conflict with future globals\r\n  * Option 3: Differentiate properties with a sigil\r\n    + Pros\r\n      - Non-breaking change that developers can opt-in to\r\n      - Similar to how other libraries handle attributes/properties\r\n      - The system is explicit\r\n    + Cons\r\n      - It’s new syntax\r\n      - Not clear how server-side rendering would work\r\n  * Option 4: Add an attributes object\r\n    + Pros\r\n      - The system is explicit\r\n      - Extending syntax may also solve issues with event handling\r\n    + Cons\r\n      - It’s new syntax\r\n      - It may be a breaking change\r\n      - It may be a larger change than any of the previous proposals\r\n  * Option 5: An API for consuming custom elements\r\n    + Pros\r\n      - The system is explicit\r\n      - Non-breaking change\r\n      - Idiomatic to React\r\n    + Cons\r\n      - Could be a lot of work for a complex component\r\n      - May bloat bundle size\r\n      - Config needs to keep pace with the component\r\n\r\n# Background\r\n\r\nWhen React tries to pass data to a custom element it always does so using HTML attributes.\r\n\r\n```jsx\r\n<x-foo bar={baz}> // same as setAttribute('bar', baz)\r\n```\r\n\r\nBecause attributes must be serialized to strings, this approach creates problems when the data being passed is an object or array. In that scenario, we end up with something like:\r\n\r\n```html\r\n<x-foo bar=\"[object Object]\">\r\n```\r\n\r\nThe workaround for this is to use a `ref` to manually set the property.\r\n\r\n```jsx\r\n<x-foo ref={el => el.bar = baz}>\r\n```\r\n\r\nThis workaround feels a bit unnecessary as the majority of custom elements being shipped today are written with libraries which automatically generate JavaScript properties that back all of their exposed attributes. And anyone hand-authoring a vanilla custom element is [encouraged to follow this practice](https://developers.google.com/web/fundamentals/web-components/best-practices#attributes-properties) as well. We'd like to ideally see runtime communication with custom elements in React use JavaScript properties by default.\r\n\r\nThis doc outlines a few proposals for how React could be updated to make this happen.\r\n\r\n# Proposals\r\n\r\n## Option 1: Only set properties\r\n\r\nRather than try to decide if a property or attribute should be set, React could *always* set properties on custom elements. React would **NOT** check to see if the property exists on the element beforehand.\r\n\r\n**Example:**\r\n\r\n```jsx\r\n<x-foo bar={baz}>\r\n```\r\n\r\nThe above code would result in React setting the `.bar` property of the `x-foo` element equal to the value of `baz`.\r\n\r\nFor camelCased property names, React could use the same style it uses today for properties like `tabIndex`.\r\n\r\n```jsx\r\n<x-foo squidInk={pasta}> // sets .squidInk = pasta\r\n```\r\n\r\n### Pros\r\n\r\n#### Easy to understand/implement\r\n\r\nThis model is simple, explicit, and dovetails with React’s [\"JavaScript-centric API to the DOM\"](https://reactjs.org/blog/2017/09/08/dom-attributes-in-react-16.html#why-are-we-changing-this).\r\n\r\nAny element created with libraries like Polymer or Skate will automatically generate properties to back their exposed attributes. These elements should all \"just work\" with the above approach. Developers hand-authoring vanilla components are encouraged to [back attributes with properties](https://developers.google.com/web/fundamentals/web-components/best-practices#always-accept-primitive-data-strings-numbers-booleans-as-either-attributes--or-properties) as that mirrors how *modern* (i.e. not oddballs like `<input>`) HTML5 elements (`<video>`, `<audio>`, etc.) have been implemented.\r\n\r\n#### Avoids conflict with future global attributes\r\n\r\nWhen React sets an attribute on a custom element there’s always the risk that a future version of HTML will ship a similarly named attribute and break things. This concern was [discussed with spec authors](https://github.com/w3c/webcomponents/issues/654) but there is no clear solution to the problem. Avoiding attributes entirely (except when a developer explicitly sets one using `ref`) may sidestep this issue until the browsers come up with a better solution.\r\n\r\n#### Takes advantage of custom element \"upgrade\"\r\n\r\nCustom elements can be lazily [upgraded](https://developers.google.com/web/fundamentals/web-components/customelements#upgrades) on the page and some PRPL patterns rely on this technique. During the upgrade process, a custom element can access the properties passed to it by React—even if those properties were set before the definition loaded—and use them to render initial state.\r\n\r\n#### Custom elements treated like any other React component\r\n\r\nWhen React components pass data to one another they already use properties. This would just make custom elements behave the same way.\r\n\r\n### Cons\r\n\r\n#### Possibly a breaking change\r\n\r\nIf a developer has been hand-authoring vanilla custom elements which only have an attributes API, then they will need to update their code or their app will break. The fix would be to use a `ref` to set the attribute (explained below).\r\n\r\n#### Need ref to set attribute\r\n\r\nBy changing the behavior so properties are preferred, it means developers will need to use a `ref` in order to explicitly set an attribute on a custom element.\r\n\r\n```jsx\r\n<custom-element ref={el => el.setAttribute('my-attr', val)} />\r\n```\r\n\r\nThis is just a reversal of the current behavior where developers need a `ref` in order to set a property. Since developers should rarely need to set attributes on custom elements, this seems like a reasonable trade-off.\r\n\r\n#### Not clear how server-side rendering would work\r\n\r\nIt's not clear how this model would map to server-side rendering custom elements. React could assume that the properties map to similarly named attributes and attempt to set those on the server, but this is far from bulletproof and would possibly require a heuristic for things like camelCased properties -> dash-cased attributes.\r\n\r\n## Option 2: Properties-if-available\r\n\r\nAt runtime React could attempt to detect if a property is present on a custom element. If the property is present React will use it, otherwise it will fallback to setting an attribute. This is the model Preact uses to deal with custom elements.\r\n\r\n**Pseudocode implementation:**\r\n\r\n```js\r\nif (propName in element) {\r\n  element[propName] = value;\r\n} else {\r\n  element.setAttribute(propName.toLowerCase(), value);\r\n}\r\n```\r\n\r\n**Possible steps:**\r\n\r\n* If an element has a defined property, React will use it.\r\n\r\n* If an element has an undefined property, and React is trying to pass it primitive data (string/number/boolean), it will use an attribute.\r\n\r\n    * Alternative: Warn and don’t set.\r\n\r\n* If an element has an undefined property, and React is trying to pass it an object/array it will set it as a property. This is because some-attr=\"[object Object]” is not useful.\r\n\r\n    * Alternative: Warn and don’t set.\r\n\r\n* If the element is being rendered on the server, and React is trying to pass it a string/number/boolean, it will use an attribute.\r\n\r\n* If the element is being rendered on the server, and React is trying to pass it a object/array, it will not do anything.\r\n\r\n### Pros\r\n\r\n#### Non-breaking change\r\n\r\nIt is possible to create a custom element that only uses attributes as its interface. This authoring style is **NOT** encouraged, but it may happen regardless. If a custom element author is relying on this behavior then this change would be non-breaking for them.\r\n\r\n### Cons\r\n\r\n#### Developers need to understand the heuristic\r\n\r\nDevelopers might be confused when React sets an attribute instead of a property depending on how they’ve chosen to load their element.\r\n\r\n#### Falling back to attributes may conflict with future globals\r\n\r\nSebastian [raised a concern](https://github.com/facebook/react/issues/10399#issuecomment-320847065) that using `in` to check for the existence of a property on a custom element might accidentally detect a property on the superclass (HTMLElement).\r\n\r\nThere are also other potential conflicts with global attributes [discussed previously](#avoids-conflict-with-future-global-attributes) in this doc.\r\n\r\n## Option 3: Differentiate properties with a sigil\r\n\r\nReact could continue setting attributes on custom elements, but provide a sigil that developers could use to explicitly set properties instead. This is similar to [the approach used by Glimmer.js](https://www.emberjs.com/blog/2017/10/10/glimmer-progress-report.html#toc_component-attributes).\r\n\r\n**Glimmer example:**\r\n\r\n```html\r\n<custom-img @src=\"corgi.jpg\" @hiResSrc=\"corgi@2x.jpg\" width=\"100%\">\r\n```\r\n\r\nIn the above example, the @ sigil indicates that `src` and `hiResSrc` should pass data to the custom element using properties, and `width` should be serialized to an attribute string.\r\n\r\nBecause React components already pass data to one another using properties, there would be no need for them to use the sigil (although it would work if they did, it would just be redundant). Instead, it would primarily be used as an explicit instruction to pass data to a custom element using JavaScript properties.\r\n\r\n*h/t to @developit of Preact for suggesting this approach :)*\r\n\r\n### Pros\r\n\r\n#### Non-breaking change that developers can opt-in to\r\n\r\nAll pre-existing React + custom element apps would continue to work exactly as they have. Developers could choose if they wanted to update their code to use the new sigil style.\r\n\r\n#### Similar to how other libraries handle attributes/properties\r\n\r\nSimilar to Glimmer, both Angular and Vue use modifiers to differentiate between attributes and properties.\r\n\r\n**Vue example:**\r\n\r\n```html\r\n<!-- Vue will serialize `foo` to an attribute string, and set `squid` using a JavaScript property -->\r\n<custom-element :foo=\"bar” :squid.prop=”ink”>\r\n```\r\n\r\n**Angular example:**\r\n\r\n```html\r\n<!-- Angular will serialize `foo` to an attribute string, and set `squid` using a JavaScript property -->\r\n<custom-element [attr.foo]=\"bar” [squid]=”ink”>\r\n```\r\n\r\n#### The system is explicit\r\n\r\nDevelopers can tell React exactly what they want instead of relying on a heuristic like the [properties-if-available](#option-2--properties-if-available) approach.\r\n\r\n### Cons\r\n\r\n#### It’s new syntax\r\n\r\nDevelopers need to be taught how to use it and it needs to be thoroughly tested to make sure it is backwards compatible.\r\n\r\n#### Not clear how server-side rendering would work\r\n\r\nShould the sigil switch to using a similarly named attribute?\r\n\r\n## Option 4: Add an attributes object\r\n\r\nReact could add additional syntax which lets authors explicitly pass data as attributes. If developers do not use this attributes object, then their data will be passed using JavaScript properties.\r\n\r\n**Example:**\r\n\r\n```jsx\r\nconst bar = 'baz';\r\nconst hello = 'World';\r\nconst width = '100%';\r\nconst ReactElement = <Test\r\n  foo={bar} // uses JavaScript property\r\n  attrs={{ hello, width }} // serialized to attributes\r\n/>;\r\n```\r\n\r\nThis idea was [originally proposed](https://gist.github.com/treshugart/2fb509a8828adf7fee5245bfa2a54ba7) by @treshugart, author of Skate.js, and is implemented in the [val](https://github.com/skatejs/val) library.\r\n\r\n### Pros\r\n\r\n#### The system is explicit\r\n\r\nDevelopers can tell React exactly what they want instead of relying on a heuristic like the [properties-if-available](#option-2--properties-if-available) approach.\r\n\r\n#### Extending syntax may also solve issues with event handling\r\n\r\n*Note: This is outside the scope of this document but maybe worth mentioning :)*\r\n\r\nIssue [#7901](https://github.com/facebook/react/issues/7901) requests that React bypass its synthetic event system when declarative event handlers are added to custom elements. Because custom element event names are arbitrary strings, it means they can be capitalized in any fashion. To bypass the synthetic event system today will also mean needing to come up with a heuristic for mapping event names from JSX to `addEventListener`.\r\n\r\n```js\r\n// should this listen for: 'foobar', 'FooBar', or 'fooBar'?\r\nonFooBar={handleFooBar}\r\n```\r\n\r\nHowever, if the syntax is extended to allow attributes it could also be extended to allow events as well:\r\n\r\n```js\r\nconst bar = 'baz';\r\nconst hello = 'World';\r\nconst SquidChanged = e => console.log('yo');\r\nconst ReactElement = <Test\r\n  foo={bar}\r\n  attrs={{ hello }}\r\n  events={{ SquidChanged}} // addEventListener('SquidChanged', …)\r\n/>;\r\n```\r\n\r\nIn this model the variable name is used as the event name. No heuristic is needed.\r\n\r\n### Cons\r\n\r\n#### It’s new syntax\r\n\r\nDevelopers need to be taught how to use it and it needs to be thoroughly tested to make sure it is backwards compatible.\r\n\r\n#### It may be a breaking change\r\n\r\nIf any components already rely on properties named `attrs` or `events`, it could break them.\r\n\r\n#### It may be a larger change than any of the previous proposals\r\n\r\nFor React 17 it may be easier to make an incremental change (like one of the previous proposals) and position this proposal as something to take under consideration for a later, bigger refactor.\r\n\r\n## Option 5: An API for consuming custom elements\r\n\r\n*This proposal was offered by @sophiebits and @gaearon from the React team*\r\n\r\nReact could create a new API for consuming custom elements that maps the element’s behavior with a configuration object.\r\n\r\n**Pseudocode example:**\r\n\r\n```js\r\nconst XFoo = ReactDOM.createCustomElementType({\r\n  element: ‘x-foo’,\r\n  ‘my-attr’: // something that tells React what to do with it\r\n  someRichDataProp: // something that tells React what to do with it\r\n});\r\n```\r\n\r\nThe above code returns a proxy component, `XFoo` that knows how to pass data to a custom element depending on the configuration you provide. You would use this proxy component in your app instead of using the custom element directly.\r\n\r\n**Example usage:**\r\n\r\n```jsx\r\n<XFoo someRichDataProp={...} />\r\n```\r\n\r\n### Pros\r\n\r\n#### The system is explicit\r\n\r\nDevelopers can tell React the exact behavior they want.\r\n\r\n#### Non-breaking change\r\n\r\nDevelopers can opt-in to using the object or continue using the current system.\r\n\r\n#### Idiomatic to React\r\n\r\nThis change doesn’t require new JSX syntax, and feels more like other APIs in React. For example, PropTypes (even though it’s being moved into its own package) has a somewhat similar approach.\r\n\r\n### Cons\r\n\r\n#### Could be a lot of work for a complex component\r\n\r\nPolymer’s [paper-input](https://www.webcomponents.org/element/PolymerElements/paper-input/elements/paper-input) element has 37 properties, so it would produce a very large config. If developers are using a lot of custom elements in their app, that may equal a lot of configs they need to write.\r\n\r\n#### May bloat bundle size\r\n\r\nRelated to the above point, each custom element class now incurs the cost of its definition + its config object size.\r\n\r\n*Note: I'm not 100% sure if this is true. Someone more familiar with the React build process could verify.*\r\n\r\n#### Config needs to keep pace with the component\r\n\r\nEvery time the component does a minor version revision that adds a new property, the config will need to be updated as well. That’s not difficult, but it does add maintenance. Maybe if configs are generated from source this is less of a burden, but that may mean needing to create a new tool to generate configs for each web component library.\r\n\r\n\r\ncc @sebmarkbage @gaearon @developit @treshugart @justinfagnani",
      "reactions": {
        "url": "https://api.github.com/repos/facebook/react/issues/11347/reactions",
        "total_count": 476,
        "+1": 278,
        "-1": 0,
        "laugh": 0,
        "hooray": 40,
        "confused": 0,
        "heart": 108,
        "rocket": 30,
        "eyes": 20
      },
      "timeline_url": "https://api.github.com/repos/facebook/react/issues/11347/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/1739",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/1739/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/1739/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/1739/events",
      "html_url": "https://github.com/facebook/react/issues/1739",
      "id": 36379404,
      "node_id": "MDU6SXNzdWUzNjM3OTQwNA==",
      "number": 1739,
      "title": "Support asynchronous server rendering (waiting for data before rendering)",
      "user": {
        "login": "fdecampredon",
        "id": 864201,
        "node_id": "MDQ6VXNlcjg2NDIwMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/864201?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/fdecampredon",
        "html_url": "https://github.com/fdecampredon",
        "followers_url": "https://api.github.com/users/fdecampredon/followers",
        "following_url": "https://api.github.com/users/fdecampredon/following{/other_user}",
        "gists_url": "https://api.github.com/users/fdecampredon/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/fdecampredon/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/fdecampredon/subscriptions",
        "organizations_url": "https://api.github.com/users/fdecampredon/orgs",
        "repos_url": "https://api.github.com/users/fdecampredon/repos",
        "events_url": "https://api.github.com/users/fdecampredon/events{/privacy}",
        "received_events_url": "https://api.github.com/users/fdecampredon/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 121709921,
          "node_id": "MDU6TGFiZWwxMjE3MDk5MjE=",
          "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
          "name": "Type: Feature Request",
          "color": "c7def8",
          "default": false,
          "description": null
        },
        {
          "id": 710332294,
          "node_id": "MDU6TGFiZWw3MTAzMzIyOTQ=",
          "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Server%20Rendering",
          "name": "Component: Server Rendering",
          "color": "d4c5f9",
          "default": false,
          "description": null
        },
        {
          "id": 739777675,
          "node_id": "MDU6TGFiZWw3Mzk3Nzc2NzU=",
          "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Component%20API",
          "name": "Component: Component API",
          "color": "d4c5f9",
          "default": false,
          "description": null
        },
        {
          "id": 1775955521,
          "node_id": "MDU6TGFiZWwxNzc1OTU1NTIx",
          "url": "https://api.github.com/repos/facebook/react/labels/Resolution:%20Backlog",
          "name": "Resolution: Backlog",
          "color": "9dd1e8",
          "default": false,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 146,
      "created_at": "2014-06-24T12:36:38Z",
      "updated_at": "2022-12-26T17:06:33Z",
      "closed_at": null,
      "author_association": "NONE",
      "active_lock_reason": null,
      "body": "It would seriously ease the process of building something isomorphic if componentWillMount could return a promise and that react would delay rendering until that promise is resolved. I have seen attempt of doing something like that in react-router and rrouter, however giving this responsibility to each component instead of a router module would make more sense for me.\n",
      "reactions": {
        "url": "https://api.github.com/repos/facebook/react/issues/1739/reactions",
        "total_count": 133,
        "+1": 112,
        "-1": 0,
        "laugh": 11,
        "hooray": 0,
        "confused": 0,
        "heart": 9,
        "rocket": 0,
        "eyes": 1
      },
      "timeline_url": "https://api.github.com/repos/facebook/react/issues/1739/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/13206",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/13206/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/13206/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/13206/events",
      "html_url": "https://github.com/facebook/react/issues/13206",
      "id": 341142665,
      "node_id": "MDU6SXNzdWUzNDExNDI2NjU=",
      "number": 13206,
      "title": "[Umbrella] Releasing Suspense",
      "user": {
        "login": "acdlite",
        "id": 3624098,
        "node_id": "MDQ6VXNlcjM2MjQwOTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3624098?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/acdlite",
        "html_url": "https://github.com/acdlite",
        "followers_url": "https://api.github.com/users/acdlite/followers",
        "following_url": "https://api.github.com/users/acdlite/following{/other_user}",
        "gists_url": "https://api.github.com/users/acdlite/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/acdlite/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/acdlite/subscriptions",
        "organizations_url": "https://api.github.com/users/acdlite/orgs",
        "repos_url": "https://api.github.com/users/acdlite/repos",
        "events_url": "https://api.github.com/users/acdlite/events{/privacy}",
        "received_events_url": "https://api.github.com/users/acdlite/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 710615342,
          "node_id": "MDU6TGFiZWw3MTA2MTUzNDI=",
          "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Umbrella",
          "name": "Type: Umbrella",
          "color": "5319e7",
          "default": false,
          "description": null
        },
        {
          "id": 1775958285,
          "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
          "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
          "name": "React Core Team",
          "color": "9149d1",
          "default": false,
          "description": "Opened by a member of the React Core Team"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 119,
      "created_at": "2018-07-13T20:01:03Z",
      "updated_at": "2022-11-07T12:41:45Z",
      "closed_at": null,
      "author_association": "COLLABORATOR",
      "active_lock_reason": null,
      "body": "Let's use this issue to track the remaining tasks for releasing Suspense to open source.\r\n\r\n**Last updated: March 24, 2022**\r\n\r\n**Blog post: [The Plan for React 18](https://reactjs.org/blog/2021/06/08/the-plan-for-react-18.html)**\r\n\r\n## Completed: React 16\r\n\r\n- [x] Release `<Suspense>` with `React.lazy` for client-side lazy loading\r\n\r\n## Completed: [React 18 Alpha](https://reactjs.org/blog/2021/06/08/the-plan-for-react-18.html)\r\n\r\n- [x] Implement concurrent rendering, which is a prerequisite to everything else.\r\n- [x] Fix [fundamental flaws](https://github.com/facebook/react/pull/18796) in the concurrency model that made the behavior difficult to understand and caused many bugs.\r\n- [x] Rewrite [how React traverses the tree](https://github.com/facebook/react/pull/19261) to unblock fixing Suspense quirks.\r\n- [x] Redesign how [React integrates with the scheduler](https://github.com/facebook/react/pull/19121) to simplify the model, fix bugs, and prepare for native browser scheduling.\r\n- [x] [Fix `<Suspense>` quirks](https://github.com/reactwg/react-18/discussions/7): Previously, effects would fire inside a suspended tree too early. For example, you would see an effect from a component that's still hidden behind a placeholder. Now effects will run only _after_ the content has been revealed. We expect this to fix existing application code bugs.\r\n- [x] [Hiding and showing existing content should re-fire layout effects](https://github.com/reactwg/react-18/discussions/31): If a component that's already visible suspends, we show a placeholder, and later show it again. However, there was no way for the component to know that it was hidden or shown. For example, a tooltip component measuring its screen position would get incorrect measurements while it's hidden. Now we fire `useLayoutEffect` cleanup (same as `componentWillUnmount`) on \"hide\", and `useLayoutEffect` setup (same as `componentDidMount`) on \"show\". We expect this to fix existing application and library code bugs.\r\n- [x] [`<Suspense>` on the server no longer throws](https://github.com/reactwg/react-18/discussions/22): It used to be a hard error to render `<Suspense>` in a tree on the server. Now, **for the old server renderer**, it silently emits the fallback (and lets the client try to render the content instead). This shouldn't affect existing apps because previously it was not possible to render `<Suspense>` on the server at all.\r\n- [x] [`startTransition`](https://github.com/reactwg/react-18/discussions/41) lets you avoid hiding existing content even if it suspends again. This is useful to implement the \"show old data while refetching\" pattern with minimal code.\r\n- [x] Built-in throttling of Suspense reveals: To avoid updating the screen too often and causing visual jank, React \"waits\" a little bit before revealing the next level of spinners — in case _even more_ content is available by that time. In other words, revealing nested Suspense fallbacks is automatically throttled by React.\r\n- [x] [New Streaming Suspense Server Renderer](https://github.com/reactwg/react-18/discussions/37):\r\n    - [x] Initial streaming renderer implementation.\r\n    - [x] `React.lazy` works with SSR out of the box.\r\n    - [x] **Streaming HTML:** React uses your `<Suspense>` boundaries to stream the page HTML in visual chunks.\r\n    - [x] **Selective Hydration:** React uses your `<Suspense>` boundaries to hydrate the page in chunks, improving responsiveness.\r\n      - [x] React prioritizes hydrating the part of the page you are interacting with.\r\n      - [x] React keeps the browser responsive during hydration of `<Suspense>` boundaries.\r\n      - [x] React captures and replays missed events after hydration. \r\n- [x] [Technical preview of Server Components:](https://reactjs.org/blog/2020/12/21/data-fetching-with-react-server-components.html)\r\n  - [x] Implement the server with support for suspending. \r\n  - [x] Prototype a caching layer.\r\n  - [x] Prototype React I/O libraries like `react-fetch` and `react-pg`.\r\n  - [x] Support lazy-loaded elements for server trees.\r\n\r\n## Completed: [React 18](https://reactjs.org/blog/2021/06/08/the-plan-for-react-18.html#projected-react-18-release-timeline)\r\n\r\n- [x] Finalize [New Streaming Suspense Server Renderer](https://github.com/reactwg/react-18/discussions/37):\r\n  - [x] Make it pass all of our existing tests.\r\n  - [x] Prove it out in production (currently we use a hack in its place).\r\n  - [x] Add the missing \"static markup\" APIs for things like emails.\r\n  - [x] Fix known bugs with hydrating Suspense.\r\n  - [x] Move the new server renderer from `react-dom/unstable-fizz` to `react-dom/server`.\r\n- [x] Fall back to client rendering from closest `<Suspense>` on mismatches instead of patching up the tree.\r\n- [x] Add `onRecoverableError` to gather production reports about SSR mismatches.\r\n\r\n### Features that may or may not appear in 18.x\r\n\r\n- [ ] `<SuspenseList>` lets you declaratively coordinate the order in which `<Suspense>` nodes inside will reveal.\r\n  - [x] Implementation.\r\n  - [ ] Server support\r\n  - [ ] Finalize and document the API.\r\n- [ ] \"Backup\" `<Suspense>` boundaries (not final naming): A way to specify that you'd like React to ignore this boundary during initial render (as if it's not there), unless React is forced to hide existing content. We sometimes call these \"ugly spinners\" or \"last resort spinners\". This use case might seem a bit exotic but we've needed it quite a few times.\r\n  - [x] Initial implementation as `unstable_avoidThisFallback`\r\n  - [x] Server support\r\n  - [ ] Pick a good name\r\n- [ ] `<Suspense>` for CPU-bound trees (not final naming): A way to tell React to immediately show a placeholder _without even trying_ to render the content. This is useful if you have an expensive tree inside. This use case is unrelated to network — it's about showing a spinner for some tree that takes a while to render. See https://github.com/facebook/react/pull/19936.\r\n  - [x] Initial implementation as `unstable_expectedLoadTime`\r\n  - [ ] Adjust the heuristics\r\n  - [x] Server support\r\n  - [ ] Pick a good name\r\n- [ ] An API to prioritize hydrating a particular DOM element's parent tree.\r\n  - [x] Implement as `ReactDOM. unstable_scheduleHydration`\r\n  - [ ] Pick a name \r\n- [ ] Reducing jank: Take another look at adjusting the small details to reduce any visual jank to the minimum. For example, throttle reveal of Suspense boundaries between siblings as well.\r\n\r\n## React 18.x (post-18.0): Suspense for Data Fetching\r\n\r\nAll of the above changes are **foundational architectural improvements** to `<Suspense>`. They fill the gaps in the mechanism and make it deeply integrated with all parts of React (client and server). However, they don't prescribe a particular data fetching strategy. That will likely come after the 18.0 release, and we're hoping that to have something during the next 18.x minor releases.\r\n\r\nThis work will include:\r\n\r\n- [ ] [React I/O libraries like `react-fetch`](https://codesandbox.io/s/sad-banach-tcnim), which is a lightweight and easiest way to fetch data with Suspense.\r\n  - [x] Initial implementation\r\n  - [ ] Finalize the API\r\n- [ ] [Built-in Suspense `<Cache>`](https://github.com/reactwg/react-18/discussions/25) which will likely be the primary recommended way for third-party data fetching libraries to integrate with Suspense. (For example, `react-fetch` uses it internally.)\r\n  - [x] Initial implementation\r\n  - [ ] Try it in production\r\n  - [ ] Investigate what's missing\r\n  - [ ] Figure out the recommended strategy for normalized caches\r\n- [ ] [Server Components](https://reactjs.org/blog/2020/12/21/data-fetching-with-react-server-components.html), which will be the recommended way to fetch data with Suspense in a way that scales great and integrates with React Fetch as well as third-party libraries.\r\n  - [x] Initial implementation\r\n  - [x] Basic Server Context implementation\r\n  - [ ] Server Context features for refetching\r\n  - [ ] Figure out the layering between Server Components and New SSR\r\n  - [ ] (This section has many follow-up questions, so it's incomplete)\r\n- [ ] Clear documentation and recommendations for data fetching library authors on how to integrate with Suspense",
      "reactions": {
        "url": "https://api.github.com/repos/facebook/react/issues/13206/reactions",
        "total_count": 612,
        "+1": 333,
        "-1": 0,
        "laugh": 38,
        "hooray": 98,
        "confused": 0,
        "heart": 108,
        "rocket": 19,
        "eyes": 16
      },
      "timeline_url": "https://api.github.com/repos/facebook/react/issues/13206/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/11503",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/11503/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/11503/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/11503/events",
      "html_url": "https://github.com/facebook/react/issues/11503",
      "id": 272615283,
      "node_id": "MDU6SXNzdWUyNzI2MTUyODM=",
      "number": 11503,
      "title": "Formalize top-level ES exports",
      "user": {
        "login": "gaearon",
        "id": 810438,
        "node_id": "MDQ6VXNlcjgxMDQzOA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/810438?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gaearon",
        "html_url": "https://github.com/gaearon",
        "followers_url": "https://api.github.com/users/gaearon/followers",
        "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
        "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
        "organizations_url": "https://api.github.com/users/gaearon/orgs",
        "repos_url": "https://api.github.com/users/gaearon/repos",
        "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
        "received_events_url": "https://api.github.com/users/gaearon/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 71502270,
          "node_id": "MDU6TGFiZWw3MTUwMjI3MA==",
          "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Build%20Infrastructure",
          "name": "Component: Build Infrastructure",
          "color": "f9d0c4",
          "default": false,
          "description": null
        },
        {
          "id": 710375792,
          "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
          "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
          "name": "Type: Discussion",
          "color": "fef2c0",
          "default": false,
          "description": null
        },
        {
          "id": 763742499,
          "node_id": "MDU6TGFiZWw3NjM3NDI0OTk=",
          "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Breaking%20Change",
          "name": "Type: Breaking Change",
          "color": "aa2608",
          "default": false,
          "description": null
        },
        {
          "id": 1775958285,
          "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
          "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
          "name": "React Core Team",
          "color": "9149d1",
          "default": false,
          "description": "Opened by a member of the React Core Team"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 118,
      "created_at": "2017-11-09T15:56:42Z",
      "updated_at": "2023-04-28T17:11:17Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "Currently we only ship CommonJS versions of all packages. However we might want to ship them as ESM in the future (https://github.com/facebook/react/issues/10021).\r\n\r\nWe can't quite easily do this because we haven't really decided on what top-level ES exports would look like from each package. For example, does `react` have a bunch of named exports, but also a default export called `React`? Should we encourage people to `import *` for better tree shaking? What about `react-test-renderer/shallow` that currently exports a class (and thus would start failing in Node were it converted to be a default export)?",
      "reactions": {
        "url": "https://api.github.com/repos/facebook/react/issues/11503/reactions",
        "total_count": 198,
        "+1": 171,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 25,
        "rocket": 0,
        "eyes": 2
      },
      "timeline_url": "https://api.github.com/repos/facebook/react/issues/11503/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/11387",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/11387/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/11387/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/11387/events",
      "html_url": "https://github.com/facebook/react/issues/11387",
      "id": 269148824,
      "node_id": "MDU6SXNzdWUyNjkxNDg4MjQ=",
      "number": 11387,
      "title": "createPortal: support option to stop propagation of events in React tree",
      "user": {
        "login": "kib357",
        "id": 347668,
        "node_id": "MDQ6VXNlcjM0NzY2OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/347668?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kib357",
        "html_url": "https://github.com/kib357",
        "followers_url": "https://api.github.com/users/kib357/followers",
        "following_url": "https://api.github.com/users/kib357/following{/other_user}",
        "gists_url": "https://api.github.com/users/kib357/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/kib357/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/kib357/subscriptions",
        "organizations_url": "https://api.github.com/users/kib357/orgs",
        "repos_url": "https://api.github.com/users/kib357/repos",
        "events_url": "https://api.github.com/users/kib357/events{/privacy}",
        "received_events_url": "https://api.github.com/users/kib357/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 121709921,
          "node_id": "MDU6TGFiZWwxMjE3MDk5MjE=",
          "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
          "name": "Type: Feature Request",
          "color": "c7def8",
          "default": false,
          "description": null
        },
        {
          "id": 127893911,
          "node_id": "MDU6TGFiZWwxMjc4OTM5MTE=",
          "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
          "name": "Component: DOM",
          "color": "fef2c0",
          "default": false,
          "description": null
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 118,
      "created_at": "2017-10-27T15:36:49Z",
      "updated_at": "2023-06-13T20:05:04Z",
      "closed_at": null,
      "author_association": "NONE",
      "active_lock_reason": null,
      "body": "**Do you want to request a *feature* or report a *bug*?**\r\nFeature, but also a bug cause new API breaks old `unstable_rendersubtreeintocontainer`\r\n\r\n**What is the current behavior?**\r\nWe cannot stop all events propagation from portal to its React tree ancestors. Our layers mechanism with modals/popovers completely broken. For example, we have a dropdown button. When we click on it, click opens popover. We also want to close this popover when clicking on same button. With createPortal, click inside popover fires click on button, and it's closing. We can use stopPropagation in this simple case. But we have tons of such cases, and we need use stopPropagation for all of them. Also, we cannot stop all events.\r\n\r\n**What is the expected behavior?**\r\ncreatePortal should have an option to stop synthetic events propagation through React tree without manually stopping every event. What do you think?\r\n",
      "reactions": {
        "url": "https://api.github.com/repos/facebook/react/issues/11387/reactions",
        "total_count": 195,
        "+1": 195,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/facebook/react/issues/11387/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/14099",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/14099/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/14099/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/14099/events",
      "html_url": "https://github.com/facebook/react/issues/14099",
      "id": 377440465,
      "node_id": "MDU6SXNzdWUzNzc0NDA0NjU=",
      "number": 14099,
      "title": "useCallback() invalidates too often in practice",
      "user": {
        "login": "gaearon",
        "id": 810438,
        "node_id": "MDQ6VXNlcjgxMDQzOA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/810438?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gaearon",
        "html_url": "https://github.com/gaearon",
        "followers_url": "https://api.github.com/users/gaearon/followers",
        "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
        "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
        "organizations_url": "https://api.github.com/users/gaearon/orgs",
        "repos_url": "https://api.github.com/users/gaearon/repos",
        "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
        "received_events_url": "https://api.github.com/users/gaearon/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 1109410193,
          "node_id": "MDU6TGFiZWwxMTA5NDEwMTkz",
          "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Hooks",
          "name": "Component: Hooks",
          "color": "c2f27b",
          "default": false,
          "description": ""
        },
        {
          "id": 1775958285,
          "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
          "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
          "name": "React Core Team",
          "color": "9149d1",
          "default": false,
          "description": "Opened by a member of the React Core Team"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 112,
      "created_at": "2018-11-05T15:06:53Z",
      "updated_at": "2023-03-10T14:25:39Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "This is related to https://github.com/facebook/react/issues/14092, https://github.com/facebook/react/issues/14066, https://github.com/reactjs/rfcs/issues/83, and some other issues.\r\n\r\nThe problem is that we often want to avoid invalidating a callback (e.g. to preserve shallow equality below or to avoid re-subscriptions in the effects). But if it depends on props or state, it's likely it'll invalidate too often. See https://github.com/facebook/react/issues/14092#issuecomment-435907249 for current workarounds.\r\n\r\n`useReducer` doesn't suffer from this because the reducer is evaluated directly in the render phase. @sebmarkbage had an idea about giving `useCallback` similar semantics but it'll likely require complex implementation work. Seems like we'd have to do _something_ like this though.\r\n\r\nI'm filing this just to acknowledge the issue exists, and to track further work on this.",
      "reactions": {
        "url": "https://api.github.com/repos/facebook/react/issues/14099/reactions",
        "total_count": 162,
        "+1": 151,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 10,
        "eyes": 1
      },
      "timeline_url": "https://api.github.com/repos/facebook/react/issues/14099/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/10389",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/10389/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/10389/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/10389/events",
      "html_url": "https://github.com/facebook/react/issues/10389",
      "id": 248114062,
      "node_id": "MDU6SXNzdWUyNDgxMTQwNjI=",
      "number": 10389,
      "title": "<video /> attribute needed but not guaranteed by React",
      "user": {
        "login": "elrumordelaluz",
        "id": 784056,
        "node_id": "MDQ6VXNlcjc4NDA1Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/784056?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/elrumordelaluz",
        "html_url": "https://github.com/elrumordelaluz",
        "followers_url": "https://api.github.com/users/elrumordelaluz/followers",
        "following_url": "https://api.github.com/users/elrumordelaluz/following{/other_user}",
        "gists_url": "https://api.github.com/users/elrumordelaluz/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/elrumordelaluz/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/elrumordelaluz/subscriptions",
        "organizations_url": "https://api.github.com/users/elrumordelaluz/orgs",
        "repos_url": "https://api.github.com/users/elrumordelaluz/repos",
        "events_url": "https://api.github.com/users/elrumordelaluz/events{/privacy}",
        "received_events_url": "https://api.github.com/users/elrumordelaluz/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 121709921,
          "node_id": "MDU6TGFiZWwxMjE3MDk5MjE=",
          "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
          "name": "Type: Feature Request",
          "color": "c7def8",
          "default": false,
          "description": null
        },
        {
          "id": 127893911,
          "node_id": "MDU6TGFiZWwxMjc4OTM5MTE=",
          "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
          "name": "Component: DOM",
          "color": "fef2c0",
          "default": false,
          "description": null
        },
        {
          "id": 332720629,
          "node_id": "MDU6TGFiZWwzMzI3MjA2Mjk=",
          "url": "https://api.github.com/repos/facebook/react/labels/HTML",
          "name": "HTML",
          "color": "f7c6c7",
          "default": false,
          "description": null
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 88,
      "created_at": "2017-08-04T20:50:39Z",
      "updated_at": "2023-06-22T07:24:05Z",
      "closed_at": null,
      "author_association": "NONE",
      "active_lock_reason": null,
      "body": "As @gaearon [mentioned](https://twitter.com/dan_abramov/status/893511715463340033), React does not guarantee an *attribute* will be set, so probably this is not a bug.\r\n\r\nIf I understand well, react will ensure the property is set anyway. \r\n\r\n**Current behaviour**\r\nReact renders the html `<video />` element without the attribute `muted` when explicitly passed.\r\n\r\n**Demo time**\r\nIn [this pen](https://codepen.io/elrumordelaluz/pen/ba4b5294cec7ea455c66e9b9d0a6c889?editors=0010) I made a simple example setting `muted` to the element and obtaining the result below:\r\n![pen-screen-shot](https://user-images.githubusercontent.com/784056/28986491-7b2dd45e-7967-11e7-9f63-b4db88db9989.png)\r\n\r\nActually the property is set well, since the [original medial file](http://clips.vorwaerts-gmbh.de/VfE_html5.mp4) has an audio track and in the pen result is muted.\r\n\r\n**The point**\r\nI think is most a _specific need_ than the _expected behaviour_.\r\nFrom the functionality POV, it is absolutely ok, my _Component_ renders a `<video />` muted as requested and so on.\r\n\r\nBut there are _browsers_ and _policies_, more specifically related to this issue, Webkit and the [New <video> Policies for iOS](https://webkit.org/blog/6784/new-video-policies-for-ios/) updated one year ago, with some interesting changes for the `<video />` element.\r\nThe part interested is\r\n> `<video muted>` elements will also be allowed to autoplay without a user gesture.\r\n\r\nSo, the _specific need_ is to have the _explicit_ `attribute` to tell the browser that this video could be `autoPlay`ed.\r\n\r\nThere's a similar [issue](https://github.com/facebook/react/issues/6544)",
      "reactions": {
        "url": "https://api.github.com/repos/facebook/react/issues/10389/reactions",
        "total_count": 83,
        "+1": 78,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 5,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/facebook/react/issues/10389/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/1159",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/1159/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/1159/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/1159/events",
      "html_url": "https://github.com/facebook/react/issues/1159",
      "id": 28086808,
      "node_id": "MDU6SXNzdWUyODA4NjgwOA==",
      "number": 1159,
      "title": "Provide a way to handle browser-autocompleted form values on controlled components",
      "user": {
        "login": "ericflo",
        "id": 1228,
        "node_id": "MDQ6VXNlcjEyMjg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1228?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ericflo",
        "html_url": "https://github.com/ericflo",
        "followers_url": "https://api.github.com/users/ericflo/followers",
        "following_url": "https://api.github.com/users/ericflo/following{/other_user}",
        "gists_url": "https://api.github.com/users/ericflo/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/ericflo/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ericflo/subscriptions",
        "organizations_url": "https://api.github.com/users/ericflo/orgs",
        "repos_url": "https://api.github.com/users/ericflo/repos",
        "events_url": "https://api.github.com/users/ericflo/events{/privacy}",
        "received_events_url": "https://api.github.com/users/ericflo/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 40929151,
          "node_id": "MDU6TGFiZWw0MDkyOTE1MQ==",
          "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
          "name": "Type: Bug",
          "color": "b60205",
          "default": false,
          "description": null
        },
        {
          "id": 127893911,
          "node_id": "MDU6TGFiZWwxMjc4OTM5MTE=",
          "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
          "name": "Component: DOM",
          "color": "fef2c0",
          "default": false,
          "description": null
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 87,
      "created_at": "2014-02-22T02:05:11Z",
      "updated_at": "2023-06-28T02:19:26Z",
      "closed_at": null,
      "author_association": "CONTRIBUTOR",
      "active_lock_reason": null,
      "body": "When there's a controlled component for form names that the user has saved in their browser (common with username/password fields), the browser will sometimes render the page with values in those fields without firing onChange events.  If the user submits the form, the component state does not reflect what is showing to the user.\n\nIn experimenting with this, it appears that the data is there on load (tested by logging this.refs.myinput.getDOMNode().value)\n",
      "reactions": {
        "url": "https://api.github.com/repos/facebook/react/issues/1159/reactions",
        "total_count": 153,
        "+1": 153,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/facebook/react/issues/1159/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/15317",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/15317/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/15317/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/15317/events",
      "html_url": "https://github.com/facebook/react/issues/15317",
      "id": 429168725,
      "node_id": "MDU6SXNzdWU0MjkxNjg3MjU=",
      "number": 15317,
      "title": "[Concurrent] Safely disposing uncommitted objects",
      "user": {
        "login": "danielkcz",
        "id": 1096340,
        "node_id": "MDQ6VXNlcjEwOTYzNDA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1096340?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/danielkcz",
        "html_url": "https://github.com/danielkcz",
        "followers_url": "https://api.github.com/users/danielkcz/followers",
        "following_url": "https://api.github.com/users/danielkcz/following{/other_user}",
        "gists_url": "https://api.github.com/users/danielkcz/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/danielkcz/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/danielkcz/subscriptions",
        "organizations_url": "https://api.github.com/users/danielkcz/orgs",
        "repos_url": "https://api.github.com/users/danielkcz/repos",
        "events_url": "https://api.github.com/users/danielkcz/events{/privacy}",
        "received_events_url": "https://api.github.com/users/danielkcz/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 710375792,
          "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
          "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
          "name": "Type: Discussion",
          "color": "fef2c0",
          "default": false,
          "description": null
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 77,
      "created_at": "2019-04-04T09:17:29Z",
      "updated_at": "2020-12-26T18:34:19Z",
      "closed_at": null,
      "author_association": "NONE",
      "active_lock_reason": null,
      "body": "## How to safely keep a reference to uncommitted objects and dispose of them on unmount? \r\n\r\nFor a MobX world, we are trying to [prepare for the Concurrent mode](https://github.com/mobxjs/mobx-react-lite/issues/53). In short, there is a [Reaction object being created](https://github.com/mobxjs/mobx-react-lite/blob/231be100e6ba458f40642adb9f0bc77aa4d366ce/src/useObserver.ts#L32\r\n) to track for observables and it is stored within `useRef`.\r\n\r\nThe major problem is, that we can't just `useEffect` to create it in a safe way later. We need it to start tracking the observables on a first render otherwise we might miss some updates and cause inconsistent behavior.\r\n\r\nWe do have a [semi-working solution](https://github.com/mobxjs/mobx-react-lite/pull/121), basically, a custom made garbage collector based on `setTimeout`. However, it's unreliable as it can accidentally dispose of Reactions that are actually being used but weren't committed yet.\r\n\r\nWould love to hear we are overlooking some obvious solution there.",
      "reactions": {
        "url": "https://api.github.com/repos/facebook/react/issues/15317/reactions",
        "total_count": 17,
        "+1": 16,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 1
      },
      "timeline_url": "https://api.github.com/repos/facebook/react/issues/15317/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/11734",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/11734/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/11734/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/11734/events",
      "html_url": "https://github.com/facebook/react/issues/11734",
      "id": 278323630,
      "node_id": "MDU6SXNzdWUyNzgzMjM2MzA=",
      "number": 11734,
      "title": "value|defaultValue={Symbol|Function} should be ignored, not stringified",
      "user": {
        "login": "gaearon",
        "id": 810438,
        "node_id": "MDQ6VXNlcjgxMDQzOA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/810438?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gaearon",
        "html_url": "https://github.com/gaearon",
        "followers_url": "https://api.github.com/users/gaearon/followers",
        "following_url": "https://api.github.com/users/gaearon/following{/other_user}",
        "gists_url": "https://api.github.com/users/gaearon/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/gaearon/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gaearon/subscriptions",
        "organizations_url": "https://api.github.com/users/gaearon/orgs",
        "repos_url": "https://api.github.com/users/gaearon/repos",
        "events_url": "https://api.github.com/users/gaearon/events{/privacy}",
        "received_events_url": "https://api.github.com/users/gaearon/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 40929151,
          "node_id": "MDU6TGFiZWw0MDkyOTE1MQ==",
          "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
          "name": "Type: Bug",
          "color": "b60205",
          "default": false,
          "description": null
        },
        {
          "id": 52079258,
          "node_id": "MDU6TGFiZWw1MjA3OTI1OA==",
          "url": "https://api.github.com/repos/facebook/react/labels/Difficulty:%20starter",
          "name": "Difficulty: starter",
          "color": "94ce52",
          "default": false,
          "description": null
        },
        {
          "id": 127893911,
          "node_id": "MDU6TGFiZWwxMjc4OTM5MTE=",
          "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
          "name": "Component: DOM",
          "color": "fef2c0",
          "default": false,
          "description": null
        },
        {
          "id": 717031390,
          "node_id": "MDU6TGFiZWw3MTcwMzEzOTA=",
          "url": "https://api.github.com/repos/facebook/react/labels/good%20first%20issue",
          "name": "good first issue",
          "color": "6ce26a",
          "default": true,
          "description": null
        },
        {
          "id": 1775958285,
          "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
          "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
          "name": "React Core Team",
          "color": "9149d1",
          "default": false,
          "description": "Opened by a member of the React Core Team"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 70,
      "created_at": "2017-12-01T01:01:08Z",
      "updated_at": "2023-07-04T22:52:30Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "active_lock_reason": null,
      "body": "Regression in master from https://github.com/facebook/react/pull/11534.\r\nFound it thanks to the attribute fixture snapshots.",
      "reactions": {
        "url": "https://api.github.com/repos/facebook/react/issues/11734/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/facebook/react/issues/11734/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/7901",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/7901/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/7901/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/7901/events",
      "html_url": "https://github.com/facebook/react/issues/7901",
      "id": 181504195,
      "node_id": "MDU6SXNzdWUxODE1MDQxOTU=",
      "number": 7901,
      "title": "Bypass synthetic event system for Web Component events",
      "user": {
        "login": "staltz",
        "id": 90512,
        "node_id": "MDQ6VXNlcjkwNTEy",
        "avatar_url": "https://avatars.githubusercontent.com/u/90512?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/staltz",
        "html_url": "https://github.com/staltz",
        "followers_url": "https://api.github.com/users/staltz/followers",
        "following_url": "https://api.github.com/users/staltz/following{/other_user}",
        "gists_url": "https://api.github.com/users/staltz/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/staltz/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/staltz/subscriptions",
        "organizations_url": "https://api.github.com/users/staltz/orgs",
        "repos_url": "https://api.github.com/users/staltz/repos",
        "events_url": "https://api.github.com/users/staltz/events{/privacy}",
        "received_events_url": "https://api.github.com/users/staltz/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 121709921,
          "node_id": "MDU6TGFiZWwxMjE3MDk5MjE=",
          "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
          "name": "Type: Feature Request",
          "color": "c7def8",
          "default": false,
          "description": null
        },
        {
          "id": 710375792,
          "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
          "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
          "name": "Type: Discussion",
          "color": "fef2c0",
          "default": false,
          "description": null
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 64,
      "created_at": "2016-10-06T19:27:26Z",
      "updated_at": "2022-07-27T09:12:44Z",
      "closed_at": null,
      "author_association": "NONE",
      "active_lock_reason": null,
      "body": "To use a Web Component in React, you must directly attach an event listener to the React ref for that WC. We could change the implementation so that when React detects a custom element (tag names with dashes, like `my-component`), it will bypass the synthetic event system (and the whitelist) and just attach the event listener on the element itself.\n\nWhy bypass the synthetic event system? Because _anyway_ we already need to bypass it manually when using a Web Component. I'm not so familiar with the React codebase, but this naive approach seems to work. Whoever uses Web Components in React can be responsible for whatever downsides that would cause, maybe in performance, I don't know. They are already having those (supposed) downsides, this issue is just about the convenience of WC usage inside React.\n\nI was about to send a PR for this, but thought of opening an issue. I looked through the issues and didn't see any existing one related to the handling of WC events.\n\n**What is the current behavior?**\n\nA WC custom event (e.g. `flipend`) must be handled by attaching the event listener directly to the element in componentDidMount using a ref.\n\nhttp://jsbin.com/yutocopasu/1/edit?js,output\n\nReact v15.1.0\n\n``` js\nclass HelloMessage extends React.Component {\n  handleHelloClick() {\n    this.refs['foo'].toggle();\n  }\n\n  handleFlipend(ev) {\n    console.log('Handle flip end');\n  }\n\n  componentDidMount() {\n    this.refs['foo'].addEventListener('flipend', ev =>\n      this.handleFlipend(ev);\n    );\n  }\n\n  render() {\n    return (\n      <div>\n        <div onClick={ev => this.handleHelloClick()}>\n          Hello {this.props.name}, click me!\n        </div>\n        <brick-flipbox class=\"demo\" ref=\"foo\">\n          <div>front</div>\n          <div>back</div>\n        </brick-flipbox>\n      </div>\n    );\n  }\n}\n```\n\n**What is the expected behavior?**\n\nA WC custom event can be handled with `onMyEvent={ev => this.handleMyEvent(ev)}` on the ReactElement corresponding to the WC.\n\n``` js\nclass HelloMessage extends React.Component {\n  handleHelloClick() {\n    this.refs['foo'].toggle();\n  }\n\n  handleFlipend(ev) {\n    console.log('Handle flip end');\n  }\n\n  render() {\n    return (\n      <div>\n        <div onClick={ev => this.handleHelloClick()}>\n          Hello {this.props.name}, click me!\n        </div>\n        <brick-flipbox onFlipend={ev => this.handleFlipend(ev)} class=\"demo\" ref=\"foo\">\n          <div>front</div>\n          <div>back</div>\n        </brick-flipbox>\n      </div>\n    );\n  }\n}\n```\n\nPS: this snippet above still has the `ref`, but for unrelated reasons. Ideally we wouldn't need refs for handling events of WCs.\n",
      "reactions": {
        "url": "https://api.github.com/repos/facebook/react/issues/7901/reactions",
        "total_count": 96,
        "+1": 85,
        "-1": 0,
        "laugh": 0,
        "hooray": 11,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/facebook/react/issues/7901/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/17355",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/17355/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/17355/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/17355/events",
      "html_url": "https://github.com/facebook/react/issues/17355",
      "id": 522336536,
      "node_id": "MDU6SXNzdWU1MjIzMzY1MzY=",
      "number": 17355,
      "title": "\"Should not already be working\" in Firefox after a breakpoint/alert",
      "user": {
        "login": "gzzo",
        "id": 5722054,
        "node_id": "MDQ6VXNlcjU3MjIwNTQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5722054?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gzzo",
        "html_url": "https://github.com/gzzo",
        "followers_url": "https://api.github.com/users/gzzo/followers",
        "following_url": "https://api.github.com/users/gzzo/following{/other_user}",
        "gists_url": "https://api.github.com/users/gzzo/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/gzzo/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gzzo/subscriptions",
        "organizations_url": "https://api.github.com/users/gzzo/orgs",
        "repos_url": "https://api.github.com/users/gzzo/repos",
        "events_url": "https://api.github.com/users/gzzo/events{/privacy}",
        "received_events_url": "https://api.github.com/users/gzzo/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 40929151,
          "node_id": "MDU6TGFiZWw0MDkyOTE1MQ==",
          "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
          "name": "Type: Bug",
          "color": "b60205",
          "default": false,
          "description": null
        },
        {
          "id": 588833528,
          "node_id": "MDU6TGFiZWw1ODg4MzM1Mjg=",
          "url": "https://api.github.com/repos/facebook/react/labels/Difficulty:%20medium",
          "name": "Difficulty: medium",
          "color": "fbca04",
          "default": false,
          "description": null
        },
        {
          "id": 710722093,
          "node_id": "MDU6TGFiZWw3MTA3MjIwOTM=",
          "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
          "name": "Type: Needs Investigation",
          "color": "65AA9C",
          "default": false,
          "description": ""
        },
        {
          "id": 717031390,
          "node_id": "MDU6TGFiZWw3MTcwMzEzOTA=",
          "url": "https://api.github.com/repos/facebook/react/labels/good%20first%20issue",
          "name": "good first issue",
          "color": "6ce26a",
          "default": true,
          "description": null
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 63,
      "created_at": "2019-11-13T16:35:19Z",
      "updated_at": "2023-05-16T21:36:41Z",
      "closed_at": null,
      "author_association": "NONE",
      "active_lock_reason": null,
      "body": "**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nI'm seeing \"Error: Should not already be working\" after upgrading to React 16.11\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nThis is exclusively happening on an older version of Chrome, 68.0.3440 on Windows 7\r\n\r\nI was unable to reproduce this in a VM environment but our Sentry is getting littered with these errors. \r\n\r\nI know it's a long shot, but I wasn't able to find any information about this error anywhere, just a reference in the error codes file in react, so thought it would be a good idea to report this just in case. Curious if anyone has seen this.\r\n",
      "reactions": {
        "url": "https://api.github.com/repos/facebook/react/issues/17355/reactions",
        "total_count": 46,
        "+1": 46,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/facebook/react/issues/17355/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/6436",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/6436/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/6436/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/6436/events",
      "html_url": "https://github.com/facebook/react/issues/6436",
      "id": 146710693,
      "node_id": "MDU6SXNzdWUxNDY3MTA2OTM=",
      "number": 6436,
      "title": "Support Passive Event Listeners",
      "user": {
        "login": "sebmarkbage",
        "id": 63648,
        "node_id": "MDQ6VXNlcjYzNjQ4",
        "avatar_url": "https://avatars.githubusercontent.com/u/63648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sebmarkbage",
        "html_url": "https://github.com/sebmarkbage",
        "followers_url": "https://api.github.com/users/sebmarkbage/followers",
        "following_url": "https://api.github.com/users/sebmarkbage/following{/other_user}",
        "gists_url": "https://api.github.com/users/sebmarkbage/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/sebmarkbage/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/sebmarkbage/subscriptions",
        "organizations_url": "https://api.github.com/users/sebmarkbage/orgs",
        "repos_url": "https://api.github.com/users/sebmarkbage/repos",
        "events_url": "https://api.github.com/users/sebmarkbage/events{/privacy}",
        "received_events_url": "https://api.github.com/users/sebmarkbage/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 121709921,
          "node_id": "MDU6TGFiZWwxMjE3MDk5MjE=",
          "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
          "name": "Type: Feature Request",
          "color": "c7def8",
          "default": false,
          "description": null
        },
        {
          "id": 127893911,
          "node_id": "MDU6TGFiZWwxMjc4OTM5MTE=",
          "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
          "name": "Component: DOM",
          "color": "fef2c0",
          "default": false,
          "description": null
        },
        {
          "id": 270986513,
          "node_id": "MDU6TGFiZWwyNzA5ODY1MTM=",
          "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Big%20Picture",
          "name": "Type: Big Picture",
          "color": "61dafb",
          "default": false,
          "description": null
        },
        {
          "id": 1775958285,
          "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
          "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
          "name": "React Core Team",
          "color": "9149d1",
          "default": false,
          "description": "Opened by a member of the React Core Team"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 62,
      "created_at": "2016-04-07T18:42:47Z",
      "updated_at": "2020-08-19T14:35:25Z",
      "closed_at": null,
      "author_association": "COLLABORATOR",
      "active_lock_reason": null,
      "body": "https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md\n\nIt would be good to have everything be passive by default and only opt-in to active when needed. E.g. you could listen to text input events but only preventDefault or used controlled behavior when you have active listeners.\n\nSimilarly, we could unify this with React Native's threading model. E.g. one thing we could do there is synchronously block the UI thread when there are active listeners such as handling keystrokes.\n\ncc @vjeux @ide\n",
      "reactions": {
        "url": "https://api.github.com/repos/facebook/react/issues/6436/reactions",
        "total_count": 274,
        "+1": 258,
        "-1": 0,
        "laugh": 0,
        "hooray": 7,
        "confused": 6,
        "heart": 0,
        "rocket": 0,
        "eyes": 3
      },
      "timeline_url": "https://api.github.com/repos/facebook/react/issues/6436/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/285",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/285/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/285/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/285/events",
      "html_url": "https://github.com/facebook/react/issues/285",
      "id": 18382292,
      "node_id": "MDU6SXNzdWUxODM4MjI5Mg==",
      "number": 285,
      "title": "Declarative API for installing global DOM event handlers",
      "user": {
        "login": "sophiebits",
        "id": 6820,
        "node_id": "MDQ6VXNlcjY4MjA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6820?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sophiebits",
        "html_url": "https://github.com/sophiebits",
        "followers_url": "https://api.github.com/users/sophiebits/followers",
        "following_url": "https://api.github.com/users/sophiebits/following{/other_user}",
        "gists_url": "https://api.github.com/users/sophiebits/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/sophiebits/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/sophiebits/subscriptions",
        "organizations_url": "https://api.github.com/users/sophiebits/orgs",
        "repos_url": "https://api.github.com/users/sophiebits/repos",
        "events_url": "https://api.github.com/users/sophiebits/events{/privacy}",
        "received_events_url": "https://api.github.com/users/sophiebits/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 121709921,
          "node_id": "MDU6TGFiZWwxMjE3MDk5MjE=",
          "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
          "name": "Type: Feature Request",
          "color": "c7def8",
          "default": false,
          "description": null
        },
        {
          "id": 127893911,
          "node_id": "MDU6TGFiZWwxMjc4OTM5MTE=",
          "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
          "name": "Component: DOM",
          "color": "fef2c0",
          "default": false,
          "description": null
        },
        {
          "id": 1775955521,
          "node_id": "MDU6TGFiZWwxNzc1OTU1NTIx",
          "url": "https://api.github.com/repos/facebook/react/labels/Resolution:%20Backlog",
          "name": "Resolution: Backlog",
          "color": "9dd1e8",
          "default": false,
          "description": ""
        },
        {
          "id": 1776420141,
          "node_id": "MDU6TGFiZWwxNzc2NDIwMTQx",
          "url": "https://api.github.com/repos/facebook/react/labels/Partner",
          "name": "Partner",
          "color": "e4bef7",
          "default": false,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 59,
      "created_at": "2013-08-21T21:41:26Z",
      "updated_at": "2020-08-10T17:58:43Z",
      "closed_at": null,
      "author_association": "COLLABORATOR",
      "active_lock_reason": null,
      "body": "#284 reminded me that one thing I've sometimes wanted is to install a handler on window for `keypress` (for keyboard shortcuts) or `scroll`. Right now I can just do `window.addEventListener` in `componentDidMount` but since React is listening already, it would be nice if there were some way for me to intercept those events. (In addition, receiving normalized synthetic events is generally more useful.)\n",
      "reactions": {
        "url": "https://api.github.com/repos/facebook/react/issues/285/reactions",
        "total_count": 47,
        "+1": 46,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 1
      },
      "timeline_url": "https://api.github.com/repos/facebook/react/issues/285/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/16873",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/16873/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/16873/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/16873/events",
      "html_url": "https://github.com/facebook/react/issues/16873",
      "id": 497635505,
      "node_id": "MDU6SXNzdWU0OTc2MzU1MDU=",
      "number": 16873,
      "title": "[eslint-plugin-react-hooks] allow configuring custom hooks as \"static\"",
      "user": {
        "login": "grncdr",
        "id": 82634,
        "node_id": "MDQ6VXNlcjgyNjM0",
        "avatar_url": "https://avatars.githubusercontent.com/u/82634?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/grncdr",
        "html_url": "https://github.com/grncdr",
        "followers_url": "https://api.github.com/users/grncdr/followers",
        "following_url": "https://api.github.com/users/grncdr/following{/other_user}",
        "gists_url": "https://api.github.com/users/grncdr/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/grncdr/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/grncdr/subscriptions",
        "organizations_url": "https://api.github.com/users/grncdr/orgs",
        "repos_url": "https://api.github.com/users/grncdr/repos",
        "events_url": "https://api.github.com/users/grncdr/events{/privacy}",
        "received_events_url": "https://api.github.com/users/grncdr/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 40929153,
          "node_id": "MDU6TGFiZWw0MDkyOTE1Mw==",
          "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Enhancement",
          "name": "Type: Enhancement",
          "color": "84b6eb",
          "default": false,
          "description": null
        },
        {
          "id": 1249821345,
          "node_id": "MDU6TGFiZWwxMjQ5ODIxMzQ1",
          "url": "https://api.github.com/repos/facebook/react/labels/Component:%20ESLint%20Rules",
          "name": "Component: ESLint Rules",
          "color": "f7afdb",
          "default": false,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 58,
      "created_at": "2019-09-24T11:45:13Z",
      "updated_at": "2023-05-19T11:19:04Z",
      "closed_at": null,
      "author_association": "NONE",
      "active_lock_reason": null,
      "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nFeature/enhancement\r\n\r\n**What is the current behavior?**\r\n\r\nCurrently the eslint plugin is unable to understand when the **return value** of a custom hook is static.\r\n\r\nExample:\r\n\r\n```jsx\r\nimport React from 'react'\r\n\r\nfunction useToggle(init = false) {\r\n  const [state, setState] = React.useState(init)\r\n  const toggleState = React.useCallback(() => { setState(v => !v) }, [])\r\n  return [state, toggleState]\r\n}\r\n\r\nfunction MyComponent({someProp}) {\r\n  const [enabled, toggleEnabled] = useToggle()\r\n\r\n  const handler = React.useCallback(() => {\r\n    toggleEnabled()\r\n    doSomethingWithTheProp(someProp)\r\n  }, [someProp]) // exhaustive-deps warning for toggleEnabled\r\n\r\n  return <button onClick={handler}>Do something</button>\r\n}\r\n```\r\n\r\n**What is the expected behavior?**\r\n\r\nI would like to configure `eslint-plugin-react-hooks` to tell it that `toggleEnabled` is static and doesn't need to be included in a dependency array. This isn't a huge deal but more of an ergonomic papercut that discourages writing/using custom hooks.\r\n\r\nAs for how/where to configure it, I would be happy to add something like this to my .eslintrc:\r\n\r\n```js\r\n{\r\n  \"staticHooks\": {\r\n    \"useToggle\": [false, true],  // first return value is not stable, second is\r\n    \"useForm\": true,             // entire return value is stable \r\n  }\r\n}\r\n```\r\n\r\nThen the plugin could have an additional check [after these 2 checks](https://github.com/facebook/react/blob/8b580a89d6dbbde8a3ed69475899addef1751116/packages/eslint-plugin-react-hooks/src/ExhaustiveDeps.js#L228-L231) that tests for custom names.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nAll versions of eslint-plugin-react-hooks have the same deficiency.\r\n\r\n## Please read my first comment below and try my fork if you are interested in this feature!",
      "reactions": {
        "url": "https://api.github.com/repos/facebook/react/issues/16873/reactions",
        "total_count": 122,
        "+1": 120,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 2,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/facebook/react/issues/16873/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/10441",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/10441/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/10441/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/10441/events",
      "html_url": "https://github.com/facebook/react/issues/10441",
      "id": 249669043,
      "node_id": "MDU6SXNzdWUyNDk2NjkwNDM=",
      "number": 10441,
      "title": "Cross-origin error passed to componentDidCatch incorrectly",
      "user": {
        "login": "bvaughn",
        "id": 29597,
        "node_id": "MDQ6VXNlcjI5NTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/29597?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bvaughn",
        "html_url": "https://github.com/bvaughn",
        "followers_url": "https://api.github.com/users/bvaughn/followers",
        "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
        "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
        "organizations_url": "https://api.github.com/users/bvaughn/orgs",
        "repos_url": "https://api.github.com/users/bvaughn/repos",
        "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
        "received_events_url": "https://api.github.com/users/bvaughn/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 127893911,
          "node_id": "MDU6TGFiZWwxMjc4OTM5MTE=",
          "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
          "name": "Component: DOM",
          "color": "fef2c0",
          "default": false,
          "description": null
        },
        {
          "id": 710722093,
          "node_id": "MDU6TGFiZWw3MTA3MjIwOTM=",
          "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
          "name": "Type: Needs Investigation",
          "color": "65AA9C",
          "default": false,
          "description": ""
        },
        {
          "id": 1775958285,
          "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
          "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
          "name": "React Core Team",
          "color": "9149d1",
          "default": false,
          "description": "Opened by a member of the React Core Team"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": {
        "login": "bvaughn",
        "id": 29597,
        "node_id": "MDQ6VXNlcjI5NTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/29597?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bvaughn",
        "html_url": "https://github.com/bvaughn",
        "followers_url": "https://api.github.com/users/bvaughn/followers",
        "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
        "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
        "organizations_url": "https://api.github.com/users/bvaughn/orgs",
        "repos_url": "https://api.github.com/users/bvaughn/repos",
        "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
        "received_events_url": "https://api.github.com/users/bvaughn/received_events",
        "type": "User",
        "site_admin": false
      },
      "assignees": [
        {
          "login": "bvaughn",
          "id": 29597,
          "node_id": "MDQ6VXNlcjI5NTk3",
          "avatar_url": "https://avatars.githubusercontent.com/u/29597?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bvaughn",
          "html_url": "https://github.com/bvaughn",
          "followers_url": "https://api.github.com/users/bvaughn/followers",
          "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
          "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
          "organizations_url": "https://api.github.com/users/bvaughn/orgs",
          "repos_url": "https://api.github.com/users/bvaughn/repos",
          "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
          "received_events_url": "https://api.github.com/users/bvaughn/received_events",
          "type": "User",
          "site_admin": false
        }
      ],
      "milestone": null,
      "comments": 58,
      "created_at": "2017-08-11T15:25:18Z",
      "updated_at": "2022-09-02T06:13:07Z",
      "closed_at": null,
      "author_association": "COLLABORATOR",
      "active_lock_reason": null,
      "body": "tl;dr React is passing \"A cross-origin error was thrown\" to `componentDidCatch` when there are no cross-origin scripts.\r\n\r\nSee [this discussion thread](https://github.com/facebook/react/pull/10353#issuecomment-321528685) and [this repro case](https://github.com/tessin/tessin-mini).\r\n\r\nI was able to confirm the behavior. A quick look at `onError` showed a null `event.error`.",
      "reactions": {
        "url": "https://api.github.com/repos/facebook/react/issues/10441/reactions",
        "total_count": 3,
        "+1": 3,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/facebook/react/issues/10441/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/24430",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/24430/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/24430/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/24430/events",
      "html_url": "https://github.com/facebook/react/issues/24430",
      "id": 1213504367,
      "node_id": "I_kwDOAJy2Ks5IVJtv",
      "number": 24430,
      "title": "Bug: Hydration mismatch error due to plugins generating script tag on top",
      "user": {
        "login": "yongdamsh",
        "id": 4126644,
        "node_id": "MDQ6VXNlcjQxMjY2NDQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4126644?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/yongdamsh",
        "html_url": "https://github.com/yongdamsh",
        "followers_url": "https://api.github.com/users/yongdamsh/followers",
        "following_url": "https://api.github.com/users/yongdamsh/following{/other_user}",
        "gists_url": "https://api.github.com/users/yongdamsh/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/yongdamsh/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/yongdamsh/subscriptions",
        "organizations_url": "https://api.github.com/users/yongdamsh/orgs",
        "repos_url": "https://api.github.com/users/yongdamsh/repos",
        "events_url": "https://api.github.com/users/yongdamsh/events{/privacy}",
        "received_events_url": "https://api.github.com/users/yongdamsh/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 710332294,
          "node_id": "MDU6TGFiZWw3MTAzMzIyOTQ=",
          "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Server%20Rendering",
          "name": "Component: Server Rendering",
          "color": "d4c5f9",
          "default": false,
          "description": null
        },
        {
          "id": 1775955521,
          "node_id": "MDU6TGFiZWwxNzc1OTU1NTIx",
          "url": "https://api.github.com/repos/facebook/react/labels/Resolution:%20Backlog",
          "name": "Resolution: Backlog",
          "color": "9dd1e8",
          "default": false,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": {
        "login": "gnoff",
        "id": 2716369,
        "node_id": "MDQ6VXNlcjI3MTYzNjk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2716369?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gnoff",
        "html_url": "https://github.com/gnoff",
        "followers_url": "https://api.github.com/users/gnoff/followers",
        "following_url": "https://api.github.com/users/gnoff/following{/other_user}",
        "gists_url": "https://api.github.com/users/gnoff/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/gnoff/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gnoff/subscriptions",
        "organizations_url": "https://api.github.com/users/gnoff/orgs",
        "repos_url": "https://api.github.com/users/gnoff/repos",
        "events_url": "https://api.github.com/users/gnoff/events{/privacy}",
        "received_events_url": "https://api.github.com/users/gnoff/received_events",
        "type": "User",
        "site_admin": false
      },
      "assignees": [
        {
          "login": "gnoff",
          "id": 2716369,
          "node_id": "MDQ6VXNlcjI3MTYzNjk=",
          "avatar_url": "https://avatars.githubusercontent.com/u/2716369?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/gnoff",
          "html_url": "https://github.com/gnoff",
          "followers_url": "https://api.github.com/users/gnoff/followers",
          "following_url": "https://api.github.com/users/gnoff/following{/other_user}",
          "gists_url": "https://api.github.com/users/gnoff/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/gnoff/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/gnoff/subscriptions",
          "organizations_url": "https://api.github.com/users/gnoff/orgs",
          "repos_url": "https://api.github.com/users/gnoff/repos",
          "events_url": "https://api.github.com/users/gnoff/events{/privacy}",
          "received_events_url": "https://api.github.com/users/gnoff/received_events",
          "type": "User",
          "site_admin": false
        }
      ],
      "milestone": null,
      "comments": 57,
      "created_at": "2022-04-24T02:16:30Z",
      "updated_at": "2023-04-14T16:42:09Z",
      "closed_at": null,
      "author_association": "CONTRIBUTOR",
      "active_lock_reason": null,
      "body": "<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nReact version: 18.0.0, 18.1.0-next-fc47cb1b6-20220404 (latest version in codesandbox)\r\n\r\n## Steps To Reproduce\r\n\r\n1. Install a plugin that creates a script tag at the top(ex: [Apollo Client Devtools](https://chrome.google.com/webstore/detail/apollo-client-devtools/jdkknkkbebbapilgoeccciglkfbmbnfm))\r\n2. Go to the [demo](https://codesandbox.io/s/kind-sammet-j56ro?file=/src/App.js) in the [new SSR suspense guide](https://github.com/reactwg/react-18/discussions/37)\r\n3. Open preview in a new window\r\n4. UI mismatch error occurs at hydration time\r\n\r\n  <img width=\"600\" alt=\"스크린샷 2022-04-24 오전 11 02 34\" src=\"https://user-images.githubusercontent.com/4126644/164952677-06618e72-3343-4b92-9eaa-b45bce11c3ab.png\">\r\n\r\n<!--\r\n  Your bug will get fixed much faster if we can run your code and it doesn't\r\n  have dependencies other than React. Issues without reproduction steps or\r\n  code examples may be immediately closed as not actionable.\r\n-->\r\n\r\nLink to code example: https://codesandbox.io/s/kind-sammet-j56ro?file=/src/App.js\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\n\r\nIf a script tag is inserted before the head tag due to the user's browser environment such as a plugin, it is judged as a hydration mismatch and the screen is broken.\r\n\r\nhttps://user-images.githubusercontent.com/4126644/164953071-14546c74-d9ab-4a6f-8f99-6712f29c6dd6.mov\r\n\r\n\r\n\r\n\r\n## The expected behavior\r\n\r\nThis problem may be a part that each third party needs to solve, but I'm wondering if it's possible to handle an exception in the hydration matching logic of React.",
      "reactions": {
        "url": "https://api.github.com/repos/facebook/react/issues/24430/reactions",
        "total_count": 50,
        "+1": 50,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/facebook/react/issues/24430/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/15344",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/15344/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/15344/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/15344/events",
      "html_url": "https://github.com/facebook/react/issues/15344",
      "id": 430089125,
      "node_id": "MDU6SXNzdWU0MzAwODkxMjU=",
      "number": 15344,
      "title": "useReducer's dispatch should return a promise which resolves once its action has been delivered",
      "user": {
        "login": "pelotom",
        "id": 128019,
        "node_id": "MDQ6VXNlcjEyODAxOQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/128019?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/pelotom",
        "html_url": "https://github.com/pelotom",
        "followers_url": "https://api.github.com/users/pelotom/followers",
        "following_url": "https://api.github.com/users/pelotom/following{/other_user}",
        "gists_url": "https://api.github.com/users/pelotom/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/pelotom/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/pelotom/subscriptions",
        "organizations_url": "https://api.github.com/users/pelotom/orgs",
        "repos_url": "https://api.github.com/users/pelotom/repos",
        "events_url": "https://api.github.com/users/pelotom/events{/privacy}",
        "received_events_url": "https://api.github.com/users/pelotom/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 121709921,
          "node_id": "MDU6TGFiZWwxMjE3MDk5MjE=",
          "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
          "name": "Type: Feature Request",
          "color": "c7def8",
          "default": false,
          "description": null
        },
        {
          "id": 1109410193,
          "node_id": "MDU6TGFiZWwxMTA5NDEwMTkz",
          "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Hooks",
          "name": "Component: Hooks",
          "color": "c2f27b",
          "default": false,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 55,
      "created_at": "2019-04-07T00:04:45Z",
      "updated_at": "2023-04-04T15:34:28Z",
      "closed_at": null,
      "author_association": "NONE",
      "active_lock_reason": null,
      "body": "(This is a spinoff from [this thread](https://github.com/facebook/react/issues/15240).)\r\n\r\nIt's sometimes useful to be able to dispatch an action from within an async function, wait for the action to transform the state, and then use the resulting state to determine possible further async work to do. For this purpose it's possible to define a `useNext` hook which returns a promise of the next value:\r\n\r\n```js\r\nfunction useNext(value) {\r\n  const valueRef = useRef(value);\r\n  const resolvesRef = useRef([]);\r\n  useEffect(() => {\r\n    if (valueRef.current !== value) {\r\n      for (const resolve of resolvesRef.current) {\r\n        resolve(value);\r\n      }\r\n      resolvesRef.current = [];\r\n      valueRef.current = value;\r\n    }\r\n  }, [value]);\r\n  return () => new Promise(resolve => {\r\n    resolvesRef.current.push(resolve);\r\n  });\r\n}\r\n```\r\n\r\nand use it like so:\r\n\r\n```js\r\nconst nextState = useNext(state);\r\n\r\nuseEffect(() => {\r\n  fetchStuff(state);\r\n}, []);\r\n\r\nasync function fetchStuff(state) {\r\n  dispatch({ type: 'START_LOADING' });\r\n  \r\n  let data = await xhr.post('/api/data');\r\n  dispatch({ type: 'RECEIVE_DATA', data });\r\n  \r\n  // get the new state after the action has taken effect\r\n  state = await nextState();\r\n\r\n  if (!state.needsMoreData) return;\r\n\r\n  data = await xhr.post('/api/more-data');\r\n  dispatch({ type: 'RECEIVE_MORE_DATA', data });\r\n}\r\n```\r\n\r\n\r\nThis is all well and good, but `useNext` has a fundamental limitation: it only resolves promises when the state _changes_... so if dispatching an action resulted in the same state (thus causing `useReducer` to [bail out](https://reactjs.org/docs/hooks-reference.html#bailing-out-of-a-state-update)), our async function would hang waiting for an update that wasn't coming.\r\n\r\nWhat we _really_ want here is a way to obtain the state after the last dispatch has taken effect, whether or not it resulted in the state changing. Currently I'm not aware of a foolproof way to implement this in userland (happy to be corrected on this point). But it seems like it could be a very useful feature of `useReducer`'s `dispatch` function itself to return a promise of the state resulting from reducing by the action. Then we could rewrite the preceding example as\r\n\r\n```js\r\nuseEffect(() => {\r\n  fetchStuff(state);\r\n}, []);\r\n\r\nasync function fetchStuff(state) {\r\n  dispatch({ type: 'START_LOADING' });\r\n  \r\n  let data = await xhr.post('/api/data');\r\n  state = await dispatch({ type: 'RECEIVE_DATA', data });\r\n  \r\n  if (!state.needsMoreData) return;\r\n\r\n  data = await xhr.post('/api/more-data');\r\n  dispatch({ type: 'RECEIVE_MORE_DATA', data });\r\n}\r\n```\r\n\r\n## EDIT\r\n\r\nThinking about this a little more, the promise returned from `dispatch` doesn't need to carry the next state, because there are other situations where you want to obtain the latest state too and we can already solve that with a simple ref. The narrowly-defined problem is: we need to be able to wait until after a `dispatch()` has taken affect. So `dispatch` could just return a `Promise<void>`:\r\n\r\n```js\r\nconst stateRef = useRef(state);\r\nuseEffect(() => {\r\n  stateRef.current = state;\r\n}, [state]);\r\n\r\nuseEffect(() => {\r\n  fetchStuff();\r\n}, []);\r\n\r\nasync function fetchStuff() {\r\n  dispatch({ type: 'START_LOADING' });\r\n  \r\n  let data = await xhr.post('/api/data');\r\n\r\n  // can look at current state here too\r\n  if (!stateRef.current.shouldReceiveData) return;\r\n  \r\n  await dispatch({ type: 'RECEIVE_DATA', data });\r\n\r\n  if (!stateRef.current.needsMoreData) return;\r\n\r\n  data = await xhr.post('/api/more-data');\r\n  dispatch({ type: 'RECEIVE_MORE_DATA', data });\r\n}\r\n```",
      "reactions": {
        "url": "https://api.github.com/repos/facebook/react/issues/15344/reactions",
        "total_count": 105,
        "+1": 92,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 8,
        "rocket": 0,
        "eyes": 5
      },
      "timeline_url": "https://api.github.com/repos/facebook/react/issues/15344/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/3926",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/3926/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/3926/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/3926/events",
      "html_url": "https://github.com/facebook/react/issues/3926",
      "id": 78854591,
      "node_id": "MDU6SXNzdWU3ODg1NDU5MQ==",
      "number": 3926,
      "title": "Change event fires extra times before IME composition ends",
      "user": {
        "login": "chenxsan",
        "id": 1091472,
        "node_id": "MDQ6VXNlcjEwOTE0NzI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1091472?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/chenxsan",
        "html_url": "https://github.com/chenxsan",
        "followers_url": "https://api.github.com/users/chenxsan/followers",
        "following_url": "https://api.github.com/users/chenxsan/following{/other_user}",
        "gists_url": "https://api.github.com/users/chenxsan/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/chenxsan/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/chenxsan/subscriptions",
        "organizations_url": "https://api.github.com/users/chenxsan/orgs",
        "repos_url": "https://api.github.com/users/chenxsan/repos",
        "events_url": "https://api.github.com/users/chenxsan/events{/privacy}",
        "received_events_url": "https://api.github.com/users/chenxsan/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 40929151,
          "node_id": "MDU6TGFiZWw0MDkyOTE1MQ==",
          "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
          "name": "Type: Bug",
          "color": "b60205",
          "default": false,
          "description": null
        },
        {
          "id": 127893911,
          "node_id": "MDU6TGFiZWwxMjc4OTM5MTE=",
          "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
          "name": "Component: DOM",
          "color": "fef2c0",
          "default": false,
          "description": null
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 54,
      "created_at": "2015-05-21T06:30:30Z",
      "updated_at": "2023-06-08T02:21:55Z",
      "closed_at": null,
      "author_association": "NONE",
      "active_lock_reason": null,
      "body": "### Extra details\r\n\r\n* Similar discussion with extra details and reproducing analysis: https://github.com/facebook/react/issues/8683\r\n* Previous attempt to fix it: https://github.com/facebook/react/pull/8438 (includes some unit tests, but sufficient to be confident in the fix)\r\n\r\n------\r\n\r\n### Original Issue\r\n\r\n\r\nWhen I was trying this [example](https://jsfiddle.net/reactjs/n47gckhr/light/) from https://facebook.github.io/react/blog/2013/11/05/thinking-in-react.html, any Chinese characters inputted by Chinese pinyin input method would fire too many renders like:\r\n\r\n![screen shot 2015-05-21 at 14 04 36](https://cloud.githubusercontent.com/assets/1091472/7742565/2c8625b0-ffc3-11e4-8ac2-d7eb22a3aef3.png)\r\n\r\nActually I would expect those not to fire before I confirm the Chinese character.\r\n\r\nThen I tried another kind of input method - wubi input method, I got this:\r\n\r\n![screen shot 2015-05-21 at 14 17 15](https://cloud.githubusercontent.com/assets/1091472/7742657/42c27bac-ffc4-11e4-8a3a-7d4550e88a59.png)\r\n\r\nIt's weird too. So I did a test [in jQuery](http://jsbin.com/yepogahobo/1/edit?html,js,console,output):\r\n\r\n![screen shot 2015-05-21 at 14 05 12](https://cloud.githubusercontent.com/assets/1091472/7742591/71da6842-ffc3-11e4-9d7a-a8438721029c.png)\r\n\r\nOnly after I press the space bar to confirm the character, the `keyup` event would fire.\r\n\r\nI know it might be different between the implementation of jQuery `keyup` and react `onChange` , but I would expect the way how jQuery `keyup` handles Chinese characters instead of react's `onChange`.\r\n",
      "reactions": {
        "url": "https://api.github.com/repos/facebook/react/issues/3926/reactions",
        "total_count": 34,
        "+1": 34,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/facebook/react/issues/3926/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/18945",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/18945/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/18945/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/18945/events",
      "html_url": "https://github.com/facebook/react/issues/18945",
      "id": 620059231,
      "node_id": "MDU6SXNzdWU2MjAwNTkyMzE=",
      "number": 18945,
      "title": "DevTools: Improve browser extension iframe support",
      "user": {
        "login": "dmail",
        "id": 443639,
        "node_id": "MDQ6VXNlcjQ0MzYzOQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/443639?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dmail",
        "html_url": "https://github.com/dmail",
        "followers_url": "https://api.github.com/users/dmail/followers",
        "following_url": "https://api.github.com/users/dmail/following{/other_user}",
        "gists_url": "https://api.github.com/users/dmail/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/dmail/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/dmail/subscriptions",
        "organizations_url": "https://api.github.com/users/dmail/orgs",
        "repos_url": "https://api.github.com/users/dmail/repos",
        "events_url": "https://api.github.com/users/dmail/events{/privacy}",
        "received_events_url": "https://api.github.com/users/dmail/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 710573595,
          "node_id": "MDU6TGFiZWw3MTA1NzM1OTU=",
          "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools",
          "name": "Component: Developer Tools",
          "color": "fbca04",
          "default": false,
          "description": null
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 53,
      "created_at": "2020-05-18T09:35:01Z",
      "updated_at": "2022-08-04T13:24:00Z",
      "closed_at": null,
      "author_association": "CONTRIBUTOR",
      "active_lock_reason": null,
      "body": "<!--\r\n  Please provide a clear and concise description of what the bug is. Include\r\n  screenshots if needed. Please test using the latest version of the relevant\r\n  React packages to make sure your issue has not already been fixed.\r\n-->\r\n\r\nWhen react is inside an iframe, chrome extension for react devtools fails to detect react.\r\n\r\nThis is because the extension sets `__REACT_DEVTOOLS_GLOBAL_HOOK__` only on the top level window. Apparently it's possible to have `__REACT_DEVTOOLS_GLOBAL_HOOK__` on iframes too by adding `all_frames: true` in extension [manifest.json](https://github.com/facebook/react/blob/c390ab3643612dc08ca4bebadc5b0377e9e7eb79/packages/react-devtools-extensions/chrome/manifest.json#L49). It was done by redux devtools extension in https://github.com/zalmoxisus/redux-devtools-extension/pull/56.\r\n\r\nHave you considered adding `all_frames: true` to chrome extension ?\r\n\r\n## Steps To Reproduce\r\n\r\n1. Create a file `react-main.html`\r\n```html\r\n<!DOCTYPE html>\r\n<html>\r\n  <head>\r\n    <script crossorigin src=\"https://unpkg.com/react@16/umd/react.development.js\"></script>\r\n    <script crossorigin src=\"https://unpkg.com/react-dom@16/umd/react-dom.development.js\"></script>\r\n  </head>\r\n  <body></body>\r\n</html>\r\n\r\n```\r\n2. Create a file `react-iframe.html`\r\n```html\r\n<!DOCTYPE html>\r\n<html>\r\n  <head></head>\r\n  <body>\r\n    <iframe src=\"./react-main.html\" />\r\n  </body>\r\n</html>\r\n```\r\n3. Open `react-iframe.html` in chrome\r\n\r\n<!--\r\n  Please provide a CodeSandbox (https://codesandbox.io/s/new), a link to a\r\n  repository on GitHub, or provide a minimal code example that reproduces the\r\n  problem. You may provide a screenshot of the application if you think it is\r\n  relevant to your bug report. Here are some tips for providing a minimal\r\n  example: https://stackoverflow.com/help/mcve.\r\n-->\r\n\r\n## The current behavior\r\n\r\n![react-devtools-not-detected](https://user-images.githubusercontent.com/443639/82196553-21879100-98fa-11ea-932b-b9f49a4079c7.png)\r\n\r\n## The expected behavior\r\n\r\n![react-devtools-detected](https://user-images.githubusercontent.com/443639/82196588-2cdabc80-98fa-11ea-925d-186e8c999f44.png)\r\n\r\nPull request: https://github.com/facebook/react/pull/18952\r\n\r\n\r\n\r\n",
      "reactions": {
        "url": "https://api.github.com/repos/facebook/react/issues/18945/reactions",
        "total_count": 44,
        "+1": 44,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/facebook/react/issues/18945/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/16265",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/16265/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/16265/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/16265/events",
      "html_url": "https://github.com/facebook/react/issues/16265",
      "id": 475084284,
      "node_id": "MDU6SXNzdWU0NzUwODQyODQ=",
      "number": 16265,
      "title": "Warning for 'exhaustive-deps' keeps asking for the full 'props' object instead of allowing single 'props' properties as dependencies",
      "user": {
        "login": "cbdeveloper",
        "id": 43407798,
        "node_id": "MDQ6VXNlcjQzNDA3Nzk4",
        "avatar_url": "https://avatars.githubusercontent.com/u/43407798?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cbdeveloper",
        "html_url": "https://github.com/cbdeveloper",
        "followers_url": "https://api.github.com/users/cbdeveloper/followers",
        "following_url": "https://api.github.com/users/cbdeveloper/following{/other_user}",
        "gists_url": "https://api.github.com/users/cbdeveloper/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/cbdeveloper/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/cbdeveloper/subscriptions",
        "organizations_url": "https://api.github.com/users/cbdeveloper/orgs",
        "repos_url": "https://api.github.com/users/cbdeveloper/repos",
        "events_url": "https://api.github.com/users/cbdeveloper/events{/privacy}",
        "received_events_url": "https://api.github.com/users/cbdeveloper/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 710375792,
          "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
          "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
          "name": "Type: Discussion",
          "color": "fef2c0",
          "default": false,
          "description": null
        },
        {
          "id": 1249821345,
          "node_id": "MDU6TGFiZWwxMjQ5ODIxMzQ1",
          "url": "https://api.github.com/repos/facebook/react/labels/Component:%20ESLint%20Rules",
          "name": "Component: ESLint Rules",
          "color": "f7afdb",
          "default": false,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 51,
      "created_at": "2019-07-31T11:18:04Z",
      "updated_at": "2022-11-18T05:05:36Z",
      "closed_at": null,
      "author_association": "NONE",
      "active_lock_reason": null,
      "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBUG (possible) in `eslint-plugin-react-hooks`\r\n\r\n**What is the current behavior?**\r\n\r\nWhen I'm in CodeSanbox using a React Sandbox I can use single properties of the `props` object as dependencies for the `useEffect` hook:\r\n\r\nExample 1:\r\n\r\n```\r\nuseEffect(()=>{\r\n    console.log('Running useEffect...');\r\n    console.log(typeof(props.myProp));\r\n  },[ ]);\r\n```\r\n\r\nThe example 1 gives me the following warning in CodeSandbox environment:\r\n\r\n>React Hook useEffect has a missing dependency: '**props.myProp'**. Either include it or remove the dependency array. (react-hooks/exhaustive-deps) eslint\r\n\r\nAnd if I add `[props.myProp]` to the array, the warning goes away.\r\n\r\nBut the same example 1 in my local environment in VSCode, I get the following warning:\r\n\r\n>React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.eslint(react-hooks/exhaustive-deps)\r\n\r\n**What is the expected behavior?**\r\n\r\nI would expect that I would get the same behavior that I get on CodeSandbox in my local environment in VSCode.\r\n\r\nBut, if I add `[props.myProp]` to the array, the warning DOES NOT go away. Although the code works as intended.\r\n\r\nWhat could be happening? Does CodeSandbox uses a different version of the plugin? Is there any configuration I can make to change this behavior?\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nVersions I'm using:\r\n\r\nDEV:\r\n```\r\n\"eslint\": \"^5.10.0\",\r\n\"eslint-plugin-react\": \"^7.11.1\",\r\n\"eslint-plugin-react-hooks\": \"^1.6.1\",\r\n```\r\n\r\nREGULAR\r\n```\r\n\"react\": \"^16.8.6\",\r\n\"react-dom\": \"^16.8.6\",\r\n```\r\n\r\nVSCODE (probably not causing this issue)\r\n\r\nVersion: 1.32.3 (user setup)\r\nCommit: a3db5be9b5c6ba46bb7555ec5d60178ecc2eaae4\r\nDate: 2019-03-14T23:43:35.476Z\r\nElectron: 3.1.6\r\nChrome: 66.0.3359.181\r\nNode.js: 10.2.0\r\nV8: 6.6.346.32\r\nOS: Windows_NT x64 10.0.17763\r\n\r\n**.eslintrc.json**\r\n\r\n```\r\n{\r\n  \"root\"  :true,\r\n  \"env\": {\r\n    \"browser\": true,\r\n    \"commonjs\": true,\r\n    \"es6\": true,\r\n    \"node\": true\r\n  },\r\n  \"extends\": [\r\n    \"eslint:recommended\",\r\n    \"plugin:react/recommended\",\r\n    \"plugin:import/errors\"\r\n  ],\r\n  \"parser\":\"babel-eslint\",\r\n  \"parserOptions\": {\r\n    \"ecmaVersion\": 2018,\r\n    \"sourceType\": \"module\",\r\n    \"ecmaFeatures\": {\r\n      \"jsx\":true\r\n    }\r\n  },\r\n  \"plugins\":[\r\n    \"react\",\r\n    \"react-hooks\"\r\n  ],\r\n  \"rules\": {\r\n    \"react/prop-types\": 0,\r\n    \"semi\": \"error\",\r\n    \"no-console\": 0,\r\n    \"react-hooks/rules-of-hooks\": \"error\",\r\n    \"react-hooks/exhaustive-deps\": \"warn\"\r\n  },\r\n  \"settings\": {\r\n    \"import/resolver\" : {\r\n      \"alias\" : {\r\n        \"map\" : [\r\n          [\"@components\",\"./src/components\"],\r\n          [\"@constants\",\"./src/constants\"],\r\n          [\"@helpers\",\"./src/helpers\"]\r\n        ],\r\n        \"extensions\": [\".js\"]\r\n      }\r\n    },\r\n    \"react\" : {\r\n      \"version\": \"detect\"\r\n    }\r\n  }\r\n}\r\n\r\n```\r\n\r\n\r\n",
      "reactions": {
        "url": "https://api.github.com/repos/facebook/react/issues/16265/reactions",
        "total_count": 37,
        "+1": 37,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/facebook/react/issues/16265/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/11565",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/11565/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/11565/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/11565/events",
      "html_url": "https://github.com/facebook/react/issues/11565",
      "id": 274279505,
      "node_id": "MDU6SXNzdWUyNzQyNzk1MDU=",
      "number": 11565,
      "title": "React-test-renderer: support for portal",
      "user": {
        "login": "alansouzati",
        "id": 1207250,
        "node_id": "MDQ6VXNlcjEyMDcyNTA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1207250?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/alansouzati",
        "html_url": "https://github.com/alansouzati",
        "followers_url": "https://api.github.com/users/alansouzati/followers",
        "following_url": "https://api.github.com/users/alansouzati/following{/other_user}",
        "gists_url": "https://api.github.com/users/alansouzati/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/alansouzati/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/alansouzati/subscriptions",
        "organizations_url": "https://api.github.com/users/alansouzati/orgs",
        "repos_url": "https://api.github.com/users/alansouzati/repos",
        "events_url": "https://api.github.com/users/alansouzati/events{/privacy}",
        "received_events_url": "https://api.github.com/users/alansouzati/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 121709921,
          "node_id": "MDU6TGFiZWwxMjE3MDk5MjE=",
          "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
          "name": "Type: Feature Request",
          "color": "c7def8",
          "default": false,
          "description": null
        },
        {
          "id": 710400704,
          "node_id": "MDU6TGFiZWw3MTA0MDA3MDQ=",
          "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Test%20Renderer",
          "name": "Component: Test Renderer",
          "color": "006b75",
          "default": false,
          "description": null
        },
        {
          "id": 1775958285,
          "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
          "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
          "name": "React Core Team",
          "color": "9149d1",
          "default": false,
          "description": "Opened by a member of the React Core Team"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 49,
      "created_at": "2017-11-15T19:40:29Z",
      "updated_at": "2022-12-04T22:09:31Z",
      "closed_at": null,
      "author_association": "CONTRIBUTOR",
      "active_lock_reason": null,
      "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nReport a bug\r\n\r\n**What is the current behavior?**\r\n\r\nThis test\r\n\r\n```javascript\r\nimport React from 'react';\r\nimport { createPortal } from 'react-dom';\r\nimport renderer from 'react-test-renderer';\r\n\r\nconst Drop = () => (\r\n  createPortal(\r\n    <div>hello</div>,\r\n    this.dropContainer\r\n  )\r\n);\r\n\r\ntest('Drop renders', () => {\r\n  const component = renderer.create(\r\n    <div>\r\n      <input />\r\n      <Drop />\r\n    </div>\r\n  );\r\n  const tree = component.toJSON();\r\n  expect(tree).toMatchSnapshot();\r\n});\r\n```\r\n\r\nfails with\r\n\r\n> Invariant Violation: Drop(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.\r\n\r\nThis test passes if I wrap createPortal in a container.\r\n\r\n```javascript\r\n<div>\r\n  {createPortal(\r\n    <div>hello</div>,\r\n    this.dropContainer\r\n  )}\r\n</div>\r\n```\r\n\r\n**What is the expected behavior?**\r\n\r\nThe code without the parent container works fine in the browser. So it seems that I'm adding the  parent `div` just for the test to pass. I believe `react-test-renderer` should support empty returns?\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nLastest\r\n",
      "reactions": {
        "url": "https://api.github.com/repos/facebook/react/issues/11565/reactions",
        "total_count": 44,
        "+1": 41,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 3
      },
      "timeline_url": "https://api.github.com/repos/facebook/react/issues/11565/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/10474",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/10474/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/10474/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/10474/events",
      "html_url": "https://github.com/facebook/react/issues/10474",
      "id": 250734072,
      "node_id": "MDU6SXNzdWUyNTA3MzQwNzI=",
      "number": 10474,
      "title": "The fake event trick for rethrowing errors in DEV fires unexpected global error handlers and makes testing harder",
      "user": {
        "login": "brandonbloom",
        "id": 119164,
        "node_id": "MDQ6VXNlcjExOTE2NA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/119164?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/brandonbloom",
        "html_url": "https://github.com/brandonbloom",
        "followers_url": "https://api.github.com/users/brandonbloom/followers",
        "following_url": "https://api.github.com/users/brandonbloom/following{/other_user}",
        "gists_url": "https://api.github.com/users/brandonbloom/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/brandonbloom/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/brandonbloom/subscriptions",
        "organizations_url": "https://api.github.com/users/brandonbloom/orgs",
        "repos_url": "https://api.github.com/users/brandonbloom/repos",
        "events_url": "https://api.github.com/users/brandonbloom/events{/privacy}",
        "received_events_url": "https://api.github.com/users/brandonbloom/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 127893911,
          "node_id": "MDU6TGFiZWwxMjc4OTM5MTE=",
          "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
          "name": "Component: DOM",
          "color": "fef2c0",
          "default": false,
          "description": null
        },
        {
          "id": 710375792,
          "node_id": "MDU6TGFiZWw3MTAzNzU3OTI=",
          "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Discussion",
          "name": "Type: Discussion",
          "color": "fef2c0",
          "default": false,
          "description": null
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 47,
      "created_at": "2017-08-16T19:28:44Z",
      "updated_at": "2023-02-10T15:35:17Z",
      "closed_at": null,
      "author_association": "CONTRIBUTOR",
      "active_lock_reason": null,
      "body": "I'm trying to make use of componentDidCatch in the React 16 beta. I already had a global window error handler which was working fine, but it unexpectedly catches errors that I would expect componentDidCatch to have handled. That is, component-local errors are being treated as window-global errors in dev builds.\r\n\r\nThe problem seems to stem from `invokeGuardedCallbackDev` in `ReactErrorUtils.js`. I think that this entire `__DEV__` block of code is problematic. The stated rational is:\r\n\r\n```\r\n  // In DEV mode, we swap out invokeGuardedCallback for a special version\r\n  // that plays more nicely with the browser's DevTools. The idea is to preserve\r\n  // \"Pause on exceptions\" behavior. Because React wraps all user-provided\r\n  // functions in invokeGuardedCallback, and the production version of\r\n  // invokeGuardedCallback uses a try-catch, all user exceptions are treated\r\n  // like caught exceptions, and the DevTools won't pause unless the developer\r\n  // takes the extra step of enabling pause on caught exceptions. This is\r\n  // untintuitive, though, because even though React has caught the error, from\r\n  // the developer's perspective, the error is uncaught.\r\n```\r\n\r\nThis is misguided because it's not about pausing on exceptions, it's about \"pause on _uncaught_ exceptions.\" However, `componentDidCatch` makes exceptions _caught_!\r\n\r\nRather than switching on prod vs dev and using try/catch in prod and window's error handler in dev, React should always use try/catch, but rethrow if you reach the root without hitting a componentDidCatch handler. This would preserve the correct \"pause on uncaught exceptions\" behavior without messing with global error handlers.",
      "reactions": {
        "url": "https://api.github.com/repos/facebook/react/issues/10474/reactions",
        "total_count": 45,
        "+1": 45,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/facebook/react/issues/10474/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/7249",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/7249/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/7249/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/7249/events",
      "html_url": "https://github.com/facebook/react/issues/7249",
      "id": 165043655,
      "node_id": "MDU6SXNzdWUxNjUwNDM2NTU=",
      "number": 7249,
      "title": "Attributes and properties for Custom Components",
      "user": {
        "login": "edoardocavazza",
        "id": 3907295,
        "node_id": "MDQ6VXNlcjM5MDcyOTU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/3907295?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/edoardocavazza",
        "html_url": "https://github.com/edoardocavazza",
        "followers_url": "https://api.github.com/users/edoardocavazza/followers",
        "following_url": "https://api.github.com/users/edoardocavazza/following{/other_user}",
        "gists_url": "https://api.github.com/users/edoardocavazza/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/edoardocavazza/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/edoardocavazza/subscriptions",
        "organizations_url": "https://api.github.com/users/edoardocavazza/orgs",
        "repos_url": "https://api.github.com/users/edoardocavazza/repos",
        "events_url": "https://api.github.com/users/edoardocavazza/events{/privacy}",
        "received_events_url": "https://api.github.com/users/edoardocavazza/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 121709921,
          "node_id": "MDU6TGFiZWwxMjE3MDk5MjE=",
          "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
          "name": "Type: Feature Request",
          "color": "c7def8",
          "default": false,
          "description": null
        },
        {
          "id": 127893911,
          "node_id": "MDU6TGFiZWwxMjc4OTM5MTE=",
          "url": "https://api.github.com/repos/facebook/react/labels/Component:%20DOM",
          "name": "Component: DOM",
          "color": "fef2c0",
          "default": false,
          "description": null
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 47,
      "created_at": "2016-07-12T10:19:46Z",
      "updated_at": "2022-01-09T08:09:11Z",
      "closed_at": null,
      "author_association": "NONE",
      "active_lock_reason": null,
      "body": "**Do you want to request a _feature_ or report a _bug_?**\nFeature\n**What is the current behavior?**\nCustom component's properties are always set as attribute.\n**What is the expected behavior?**\nMaybe React should watch at the static `observedAttributes` property  for custom elements (https://w3c.github.io/webcomponents/spec/custom/) and then decide to set an attribute or an instance property. Otherwise, objects and array could be always passed as properties, in order to avoid `<custom-element prop=\"[object Object]\"></custom-element>`.\n",
      "reactions": {
        "url": "https://api.github.com/repos/facebook/react/issues/7249/reactions",
        "total_count": 51,
        "+1": 51,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/facebook/react/issues/7249/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/20031",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/20031/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/20031/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/20031/events",
      "html_url": "https://github.com/facebook/react/issues/20031",
      "id": 722002931,
      "node_id": "MDU6SXNzdWU3MjIwMDI5MzE=",
      "number": 20031,
      "title": "Suggestion: transforming jsx to jsx-runtime without `createElement` fallback",
      "user": {
        "login": "morlay",
        "id": 1667873,
        "node_id": "MDQ6VXNlcjE2Njc4NzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1667873?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/morlay",
        "html_url": "https://github.com/morlay",
        "followers_url": "https://api.github.com/users/morlay/followers",
        "following_url": "https://api.github.com/users/morlay/following{/other_user}",
        "gists_url": "https://api.github.com/users/morlay/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/morlay/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/morlay/subscriptions",
        "organizations_url": "https://api.github.com/users/morlay/orgs",
        "repos_url": "https://api.github.com/users/morlay/repos",
        "events_url": "https://api.github.com/users/morlay/events{/privacy}",
        "received_events_url": "https://api.github.com/users/morlay/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 155984160,
          "node_id": "MDU6TGFiZWwxNTU5ODQxNjA=",
          "url": "https://api.github.com/repos/facebook/react/labels/Status:%20Unconfirmed",
          "name": "Status: Unconfirmed",
          "color": "d4c5f9",
          "default": false,
          "description": "A potential issue that we haven't yet confirmed as a bug"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 44,
      "created_at": "2020-10-15T05:40:57Z",
      "updated_at": "2022-08-11T11:45:35Z",
      "closed_at": null,
      "author_association": "NONE",
      "active_lock_reason": null,
      "body": "Current code transform rule is not friendly for custom `jsx-runtime` or react-like lib.\r\n\r\n```js\r\n// have to re export the `createElement`\r\nimport { createElement } from \"@emotion/core\"\r\n\r\nimport { jsx, jsxs, Fragment } from \"@emotion/core/jsx-runtime\"\r\n```\r\n\r\nCould we follow rules like below, could got same behavior.\r\n\r\n* `<span key={key} {...obj} />` => `jsx(\"span\", obj, key)`\r\n* `<span {...obj} key={key} />` => `jsx(\"span\", {...obj, key}, key)`\r\n\r\nhttps://github.com/babel/babel/issues/12177\r\nhttps://github.com/microsoft/TypeScript/pull/39199",
      "reactions": {
        "url": "https://api.github.com/repos/facebook/react/issues/20031/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/facebook/react/issues/20031/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/19371",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/19371/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/19371/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/19371/events",
      "html_url": "https://github.com/facebook/react/issues/19371",
      "id": 657441772,
      "node_id": "MDU6SXNzdWU2NTc0NDE3NzI=",
      "number": 19371,
      "title": "Setup CI infra to run DevTools tests against multiple React versions",
      "user": {
        "login": "bvaughn",
        "id": 29597,
        "node_id": "MDQ6VXNlcjI5NTk3",
        "avatar_url": "https://avatars.githubusercontent.com/u/29597?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bvaughn",
        "html_url": "https://github.com/bvaughn",
        "followers_url": "https://api.github.com/users/bvaughn/followers",
        "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
        "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
        "organizations_url": "https://api.github.com/users/bvaughn/orgs",
        "repos_url": "https://api.github.com/users/bvaughn/repos",
        "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
        "received_events_url": "https://api.github.com/users/bvaughn/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 71502270,
          "node_id": "MDU6TGFiZWw3MTUwMjI3MA==",
          "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Build%20Infrastructure",
          "name": "Component: Build Infrastructure",
          "color": "f9d0c4",
          "default": false,
          "description": null
        },
        {
          "id": 710573595,
          "node_id": "MDU6TGFiZWw3MTA1NzM1OTU=",
          "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Developer%20Tools",
          "name": "Component: Developer Tools",
          "color": "fbca04",
          "default": false,
          "description": null
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 40,
      "created_at": "2020-07-15T15:26:15Z",
      "updated_at": "2022-03-30T14:05:56Z",
      "closed_at": null,
      "author_association": "COLLABORATOR",
      "active_lock_reason": null,
      "body": "PR #19108 caused some Suspense-related DevTools regressions (more info available on #19368) which we did not catch because of the fact that DevTools tests are only run against the version of React in master.\r\n\r\nWe should follow the precedent of the [regression fixtures tests](https://github.com/facebook/react/tree/master/fixtures/devtools/regression) and have CI run DevTools tests against multiple React versions, including v15, all v16 minors, and the current HEAD of master branch.\r\n\r\nSetting this up will involve several things:\r\n* Infra to checkout older React packages and run tests against them.\r\n* Some form of gating so that we can account for expected differences in Store snapshots between React versions.\r\n* Some form of gating so that we can avoid running tests against invalid combinations of features and versions (e.g. don't test for `Suspense` in a version of React that didn't include that component yet).\r\n\r\n---\r\n\r\n## Which React versions should we test?\r\n\r\nIn addition to testing against the latest React version in source, I propose that we should also test every minor version going back as far as we support (e.g. starting with v15). We could automate this process like so:\r\n```js\r\nconst {exec} = require('child_process');\r\nconst semver = require('semver');\r\n\r\nconst versions = {};\r\n\r\nexec('npm view react versions --json', (error, stdout, stderr) => {\r\n  if (stdout) {\r\n    const json = JSON.parse(stdout);\r\n    json.forEach(versionString => {\r\n      if (semver.valid(versionString)) {\r\n        if (semver.gte(versionString, '15.0.0')) {\r\n          const {major, minor, patch} = semver.parse(versionString);\r\n\r\n          // Filter out RCs and CI-published daily releases.\r\n          if (`${major}.${minor}.${patch}` === versionString) {\r\n            // Store the last patch for each minor.\r\n            // This relies on the view command returning a sorted releases list.\r\n            const key = `${major}.${minor}`;\r\n\r\n            versions[key] = versionString;\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    // The \"versions\" object now contains all versions we should test again.\r\n  }\r\n});\r\n```",
      "reactions": {
        "url": "https://api.github.com/repos/facebook/react/issues/19371/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/facebook/react/issues/19371/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/4595",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/4595/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/4595/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/4595/events",
      "html_url": "https://github.com/facebook/react/issues/4595",
      "id": 100162479,
      "node_id": "MDU6SXNzdWUxMDAxNjI0Nzk=",
      "number": 4595,
      "title": "Externalize the State Tree (or alternatives)",
      "user": {
        "login": "sebmarkbage",
        "id": 63648,
        "node_id": "MDQ6VXNlcjYzNjQ4",
        "avatar_url": "https://avatars.githubusercontent.com/u/63648?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sebmarkbage",
        "html_url": "https://github.com/sebmarkbage",
        "followers_url": "https://api.github.com/users/sebmarkbage/followers",
        "following_url": "https://api.github.com/users/sebmarkbage/following{/other_user}",
        "gists_url": "https://api.github.com/users/sebmarkbage/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/sebmarkbage/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/sebmarkbage/subscriptions",
        "organizations_url": "https://api.github.com/users/sebmarkbage/orgs",
        "repos_url": "https://api.github.com/users/sebmarkbage/repos",
        "events_url": "https://api.github.com/users/sebmarkbage/events{/privacy}",
        "received_events_url": "https://api.github.com/users/sebmarkbage/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 270986513,
          "node_id": "MDU6TGFiZWwyNzA5ODY1MTM=",
          "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Big%20Picture",
          "name": "Type: Big Picture",
          "color": "61dafb",
          "default": false,
          "description": null
        },
        {
          "id": 1775958285,
          "node_id": "MDU6TGFiZWwxNzc1OTU4Mjg1",
          "url": "https://api.github.com/repos/facebook/react/labels/React%20Core%20Team",
          "name": "React Core Team",
          "color": "9149d1",
          "default": false,
          "description": "Opened by a member of the React Core Team"
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 40,
      "created_at": "2015-08-10T20:32:19Z",
      "updated_at": "2020-02-03T21:23:59Z",
      "closed_at": null,
      "author_association": "COLLABORATOR",
      "active_lock_reason": null,
      "body": "React provides the notion of implicitly allowing a child component to store state (using the `setState` functionality). However, it is not just used for business logic state. It is also used to remember DOM state, or tiny ephemeral state such as scroll position, text selection etc. It is also used for temporary state such as memoization.\n\nThis is kind of a magic black box in React and the implementation details are largely hidden. People tend to reinvent the wheel because of it, and invent their own state management systems. E.g. using Flux.\n\nThere is still plenty of use cases for Flux, but not all state belongs in Flux stores.\n\nManually managing the adding/removing of state nodes for all of this becomes a huge burden. So, regardless you're not going to keep doing this manually, you'll end up with your own system that does something similar. We need a convenient and standard way to handle this across components. This is not something that should be 100% in user space because then components won't be able to integrate well with each other. Even if you think you're not using it, because you're not calling setState, you still are relying on the capability being there.\n\nIt undermines the ecosystem and eventually everyone will reconverge on a single external state library anyway. We should just make sure that gets baked into React.\n\nWe designed the state tree so that the state tree data structure would be opaque so that we can optimize the internals in clever ways. It blocks many anti-patterns where external users breaks through the encapsulation boundaries to touch someone else's state. That's exactly the problem React's programming model tries to address.\n\nHowever, unfortunately this state tree is opaque to end users. This means that there are a bunch of legitimate use cases are not available to external libraries. E.g. undo/redo, reclaiming memory, restoring state between sessions, debugging tools, hot reloading, moving state from server to the client and more.\n\nWe could provide a standard externalized state-tree. E.g. using an immutable-js data structure. However, that might make clever optimizations and future features more difficult to adopt. It also isn't capable of fully encapsulating the true state of the tree which may include DOM state, it may be ok to treat this state differently as a heuristic but the API need to account for it. It also doesn't allow us to enforce a certain level of encapsulation between components.\n\nAnother approach is to try to add support for more use cases to React, one-by-one until the external state tree doesn't become useful anymore. I've created separate issues for the ones we we're already planning on supporting:\n#4593 Debugger Hooks as Public API\n#4594 Hibernating State (not the serialized form)\n\nWhat else do we need?\n\nPinging some stake holders:\n\n@leebyron @swannodette @gaearon @yungsters @ryanflorence\n",
      "reactions": {
        "url": "https://api.github.com/repos/facebook/react/issues/4595/reactions",
        "total_count": 7,
        "+1": 7,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/facebook/react/issues/4595/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/26301",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/26301/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/26301/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/26301/events",
      "html_url": "https://github.com/facebook/react/pull/26301",
      "id": 1609341065,
      "node_id": "PR_kwDOAJy2Ks5LQ0g7",
      "number": 26301,
      "title": "Fix:  onContextMenu listener is invoked on disabled buttons in Chrome",
      "user": {
        "login": "osule",
        "id": 13223818,
        "node_id": "MDQ6VXNlcjEzMjIzODE4",
        "avatar_url": "https://avatars.githubusercontent.com/u/13223818?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/osule",
        "html_url": "https://github.com/osule",
        "followers_url": "https://api.github.com/users/osule/followers",
        "following_url": "https://api.github.com/users/osule/following{/other_user}",
        "gists_url": "https://api.github.com/users/osule/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/osule/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/osule/subscriptions",
        "organizations_url": "https://api.github.com/users/osule/orgs",
        "repos_url": "https://api.github.com/users/osule/repos",
        "events_url": "https://api.github.com/users/osule/events{/privacy}",
        "received_events_url": "https://api.github.com/users/osule/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 196858374,
          "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
          "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
          "name": "CLA Signed",
          "color": "e7e7e7",
          "default": false,
          "description": null
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 39,
      "created_at": "2023-03-03T22:36:35Z",
      "updated_at": "2023-03-08T02:47:14Z",
      "closed_at": null,
      "author_association": "NONE",
      "active_lock_reason": null,
      "draft": false,
      "pull_request": {
        "url": "https://api.github.com/repos/facebook/react/pulls/26301",
        "html_url": "https://github.com/facebook/react/pull/26301",
        "diff_url": "https://github.com/facebook/react/pull/26301.diff",
        "patch_url": "https://github.com/facebook/react/pull/26301.patch",
        "merged_at": null
      },
      "body": "<!--\r\n  Thanks for submitting a pull request!\r\n  We appreciate you spending the time to work on these changes. Please provide enough information so that others can review your pull request. The three fields below are mandatory.\r\n\r\n  Before submitting a pull request, please make sure the following is done:\r\n\r\n  1. Fork [the repository](https://github.com/facebook/react) and create your branch from `main`.\r\n  2. Run `yarn` in the repository root.\r\n  3. If you've fixed a bug or added code that should be tested, add tests!\r\n  4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n  5. Run `yarn test --prod` to test in the production environment. It supports the same options as `yarn test`.\r\n  6. If you need a debugger, run `yarn test --debug --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n  7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n  8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).\r\n  10. If you haven't already, complete the CLA.\r\n\r\n  Learn more about contributing: https://reactjs.org/docs/how-to-contribute.html\r\n-->\r\n\r\n## Summary\r\n\r\nThe list of mouse events prevented implemented in  shouldPreventMouseEvent function for disabled interactive targets is doesnt include the onContextMenu event.\r\n\r\nThis causes the event listener to still be invoked even though the interactive target is disabled.\r\n\r\nThe fix is to update the event list to include the onContextMenu event and prevent the mouse event for disabled interactive targets.\r\n\r\nFixes #26298 \r\n<!--\r\n Explain the **motivation** for making this change. What existing problem does the pull request solve?\r\n-->\r\n\r\n## How did you test this change?\r\n\r\nI tested this change by locally overriding  the react-dom.development.js module in Chrome Dev Tools.\r\n\r\n \r\n\r\nhttps://user-images.githubusercontent.com/13223818/222844616-19e4491a-8246-430f-a330-58230a2b66ca.mov\r\n\r\n\r\n<!--\r\n  Demonstrate the code is solid. Example: The exact commands you ran and their output, screenshots / videos if the pull request changes the user interface.\r\n  How exactly did you verify that your PR solves the issue you wanted to solve?\r\n  If you leave this empty, your PR will very likely be closed.\r\n-->\r\n",
      "reactions": {
        "url": "https://api.github.com/repos/facebook/react/issues/26301/reactions",
        "total_count": 0,
        "+1": 0,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 0,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/facebook/react/issues/26301/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    },
    {
      "url": "https://api.github.com/repos/facebook/react/issues/3965",
      "repository_url": "https://api.github.com/repos/facebook/react",
      "labels_url": "https://api.github.com/repos/facebook/react/issues/3965/labels{/name}",
      "comments_url": "https://api.github.com/repos/facebook/react/issues/3965/comments",
      "events_url": "https://api.github.com/repos/facebook/react/issues/3965/events",
      "html_url": "https://github.com/facebook/react/issues/3965",
      "id": 81424043,
      "node_id": "MDU6SXNzdWU4MTQyNDA0Mw==",
      "number": 3965,
      "title": "Support for reparenting",
      "user": {
        "login": "dantman",
        "id": 53399,
        "node_id": "MDQ6VXNlcjUzMzk5",
        "avatar_url": "https://avatars.githubusercontent.com/u/53399?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dantman",
        "html_url": "https://github.com/dantman",
        "followers_url": "https://api.github.com/users/dantman/followers",
        "following_url": "https://api.github.com/users/dantman/following{/other_user}",
        "gists_url": "https://api.github.com/users/dantman/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/dantman/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/dantman/subscriptions",
        "organizations_url": "https://api.github.com/users/dantman/orgs",
        "repos_url": "https://api.github.com/users/dantman/repos",
        "events_url": "https://api.github.com/users/dantman/events{/privacy}",
        "received_events_url": "https://api.github.com/users/dantman/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 121709921,
          "node_id": "MDU6TGFiZWwxMjE3MDk5MjE=",
          "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
          "name": "Type: Feature Request",
          "color": "c7def8",
          "default": false,
          "description": null
        },
        {
          "id": 739777675,
          "node_id": "MDU6TGFiZWw3Mzk3Nzc2NzU=",
          "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Component%20API",
          "name": "Component: Component API",
          "color": "d4c5f9",
          "default": false,
          "description": null
        },
        {
          "id": 1775955521,
          "node_id": "MDU6TGFiZWwxNzc1OTU1NTIx",
          "url": "https://api.github.com/repos/facebook/react/labels/Resolution:%20Backlog",
          "name": "Resolution: Backlog",
          "color": "9dd1e8",
          "default": false,
          "description": ""
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [],
      "milestone": null,
      "comments": 39,
      "created_at": "2015-05-27T12:14:07Z",
      "updated_at": "2021-08-02T19:04:51Z",
      "closed_at": null,
      "author_association": "CONTRIBUTOR",
      "active_lock_reason": null,
      "body": "When writing a component that contains a set of large subtrees that stay relatively the same, but are simply moved around such that React's virtual DOM diffing can't detect the movement, React will end up recreating huge trees it should simply be moving.\n\nFor example, pretend `blockA` and `blockB` are very large structures. They may be made of several levels of children and components. For example one could be the entire page contents and the other the sidebar, while this `render()` is the page root.\n\n``` jsx\nrender() {\n    var blockA = <div>AAA</div>,\n        blockB = <div>BBB</div>;\n\n    if ( this.props.layoutA ) {\n        return <div>\n            <div className=\"something\">{blockB}</div>\n            <div className=\"something\">{blockA}</div>\n        </div>;\n    } else {\n        return <div>\n            {blockA}\n            {blockB}\n        </div>;\n    }\n}\n```\n\nBecause the blocks aren't at the same level React cannot see the relation between these blocks and `key` cannot be used to give React any hints. As a result, when `layoutA` is changed, instead of the two blocks being moved to their new location the entire page is essentially completely unrendered and then re-rendered from scratch.\n\nI understand why this is the case. It would be far to expensive for React to be able to detect movement of nodes like this.\n\nBut I do believe we need a pattern to hint to React that this component has large blocks that may be moved around at different levels.\n\nNote that there may be a component in between the rendering component root and the block. So parent semantics scoped to the nearest component won't work. This'll need owner scoping.\n\nI understand that React is trying to eliminate the need for React.createElement to be used and owner scoping within special attributes interferes with that. So instead of a component scoped `key=\"\"` variant I think a method/object style interface kind of like `React.addons.createFragment` might work.\n",
      "reactions": {
        "url": "https://api.github.com/repos/facebook/react/issues/3965/reactions",
        "total_count": 73,
        "+1": 72,
        "-1": 0,
        "laugh": 0,
        "hooray": 0,
        "confused": 0,
        "heart": 0,
        "rocket": 1,
        "eyes": 0
      },
      "timeline_url": "https://api.github.com/repos/facebook/react/issues/3965/timeline",
      "performed_via_github_app": null,
      "state_reason": null
    }
  ],
  "status": 200,
  "statusText": "",
  "headers": {
    "cache-control": "private, max-age=60, s-maxage=60",
    "content-type": "application/json; charset=utf-8",
    "etag": "W/\"1e6efcf5b0ccee949d7562318a4e49391e5d01d28fb254e9f90f56345ea6aa2a\"",
    "link": "<https://api.github.com/repositories/10270250/issues?state=open&sort=comments&direction=desc&page=2>; rel=\"next\", <https://api.github.com/repositories/10270250/issues?state=open&sort=comments&direction=desc&page=47>; rel=\"last\"",
    "x-accepted-oauth-scopes": "repo",
    "x-github-media-type": "github.v3; format=json",
    "x-github-request-id": "C4FD:125B:4945D4:514A89:64AE45F4",
    "x-oauth-scopes": "repo",
    "x-ratelimit-limit": "5000",
    "x-ratelimit-remaining": "4997",
    "x-ratelimit-reset": "1689143064",
    "x-ratelimit-resource": "core",
    "x-ratelimit-used": "3"
  },
  "config": {
    "transitional": {
      "silentJSONParsing": true,
      "forcedJSONParsing": true,
      "clarifyTimeoutError": false
    },
    "adapter": ["xhr", "http"],
    "transformRequest": [null],
    "transformResponse": [null],
    "timeout": 0,
    "xsrfCookieName": "XSRF-TOKEN",
    "xsrfHeaderName": "X-XSRF-TOKEN",
    "maxContentLength": -1,
    "maxBodyLength": -1,
    "env": {},
    "headers": {
      "Accept": "application/vnd.github.v3+json",
      "Authorization": "Bearer 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",
      "X-GitHub-Api-Version": "2022-11-28"
    },
    "params": {
      "state": "open",
      "sort": "comments",
      "direction": "desc"
    },
    "method": "get",
    "url": "https://api.github.com/repos/facebook/react/issues"
  },
  "request": {}
}
